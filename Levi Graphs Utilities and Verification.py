#########################################################################################
#
# Contents: 
#     (1) Explicit definitions of 148 superfigurations
#         (Note that the versions with renamed vertices are in a separate file)
#     (2) Utilities for generating and manipulating Levi Graphs [Starting Line 1225]
#     (3) Utilities for proving that our list of configurations is correct & complete
#     (4) Some miscellaneous things that still need to be categorized
#
#########################################################################################



#Below are all the superconfigs (other than Dancing Starfish, duals) -- 148 total. They are hidden. We have finally proven that they are right.

# Table of Contents:

# Fano                7 points
# EightThree          8 points
# Con_9_List          9 points
# ConfigDual_10s    10 points, 9 edges
# Con_10_0_List           "     10 edges, 0 deg4
# Con_10_1_R_List         "        "      1 deg4,   Reachable from 10_0
# Con_10_1_U_List         "        "         "    Unreachable from 10_0
# Con_10_1_List           "        "         "                     both
# Con_10_2_R_List         "        "      2 deg4,   Reachable from 10_1
# Con_10_2_U_List         "        "         "    Unreachable from 10_1
# Con_10_2_List           "        "         "                     both
# Con_10_3_List           "        "      3 deg4                          
# Con_10_4_List           "        "      4 deg4
# Con_11_0_List           "     11 edges, 0 deg4
# Con_11_1_R_List         "        "      1 deg4,   Reachable from 11_0
# Con_11_1_U_List         "        "         "    Unreachable from 11_1
# Con_11_1_List           "        "         "                     both
# Con_11_2_List           "        "      2 deg4
# Con_11_3_List           "        "      3 deg4
# Con_12_0_R_List         "     12 edges, 0 deg4,   Reachable from 11_0
# Con_12_0_U_List         "        "         "    Unreachable from 11_0
# Con_12_0_List           "        "         "                     both
# Con_12_1_List           "        "      1 deg4
# Con_12_2_List           "        "      2 deg4
# Con_12_3_List           "        "      3 deg4
# Con_13_0_List           "     13 edges, 0 deg4
# Con_13_1_List           "        "      1 deg4
# Con_13_2_List           "        "      2 deg4
# Con_13_3_List           "        "      3 deg4
# DancingStarfish                                                       [NoT in ThIs DoCuMenT]


# Name scheme:

# Con_9_1_Graph
#     ^ ^
# 9 means that there are 9 points.
# 1 means it is the 1st graph in that category.

# Con_12_0_U_1_Graph
#     ^^ ^ ^ ^
# 12 means that there are 12 lines.
# 0 means that 0 of those lines have degree 4.
# U means that this graph is Unreachable from other boxes, if this is relevant.
#   (Important for boxes: 10_2, 10_1, 11_1, 12_0)
# 1 means that this is the 1st graph in that category

 #7 Points
Fano_Data = Graph({11:[1,2,3], 12: [3,6,4], 13:[1,5,4], 14: [1,7,6], 15:[2,7,4], 16:[3,7,5], 17: [2,5,6]})
Fano_Part = (range(1,8),range(11,18))
Fano_Graph = BipartiteGraph(Fano_Data, Fano_Part)
Fano_Graph.name('Fano')

#8 Points
Eight_Data = Graph({11:[1,2,3],12:[3,4,5],13:[5,6,7],14:[3,7,8],15:[1,5,8],16:[2,6,8],17:[1,6,4],18:[2,7,4]})
Eight_Part = (range(1,9),range(11,19))
Eight_Graph = BipartiteGraph(Eight_Data, Eight_Part)
Eight_Graph.name('EightThree')

#9 Points

Con_9_1_Data = Graph({11:[1,2,3],12:[1,5,9],13:[1,4,8],14:[2,4,7],15:[2,6,9],16:[3,5,7],17:[3,6,8],18:[4,5,6],19:[7,8,9]})
Con_9_1_Part = (range(1,10),range(11,20))
Con_9_1_Graph = BipartiteGraph(Con_9_1_Data, Con_9_1_Part)
Con_9_1_Graph.name('Con-9-1')

Con_9_2_Data = Graph({11:[1,2,3], 12:[3,4,5], 13:[1,5,6], 14:[1,7,8], 15:[3,8,9],
                     16:[5,9,7],  17:[2,7,6], 18:[2,8,4], 19:[4,9,6]})
Con_9_2_Part = (range(1,10),range(11,20))
Con_9_2_Graph = BipartiteGraph(Con_9_2_Data, Con_9_2_Part)
Con_9_2_Graph.name('Con-9-2')

Con_9_3_Data = Graph({11:[1,2,3],12:[3,4,5],13:[5,6,1],14:[1,8,4],15:[2,7,5],
                      16:[2,8,9],17:[3,9,6],18:[4,9,7],19:[6,7,8]})
Con_9_3_Part = (range(1,10),range(11,20))
Con_9_3_Graph = BipartiteGraph(Con_9_3_Data, Con_9_3_Part)
Con_9_3_Graph.name('Con-9-3')

Con_9_4_Data = Graph({11:[1,2,3],12:[3,4,5],13:[5,6,1],14:[1,8,4],15:[2,7,5],
                      16:[2,8,9],17:[3,9,6],18:[4,2,6],19:[4,9,7],20:[6,7,8]})
Con_9_4_Part = (range(1,10),range(11,21))
Con_9_4_Graph = BipartiteGraph(Con_9_4_Data, Con_9_4_Part)
Con_9_4_Graph.name('Con-9-4')

Con_9_5_Data = Graph({11:[1,2,3],12:[3,4,5],13:[5,6,1],14:[1,7,4],15:[2,7,6],
                      16:[2,8,4],17:[3,8,6],18:[4,9,6],19:[2,9,5],20:[7,8,9]})
Con_9_5_Part = (range(1,10),range(11,21))
Con_9_5_Graph = BipartiteGraph(Con_9_5_Data, Con_9_5_Part)
Con_9_5_Graph.name('Con-9-5')

Con_9_6_Data = Graph({11:[1,2,3],12:[4,5,6],13:[7,8,9],14:[1,4,8],15:[1,5,9],
                      16:[2,4,7],17:[2,5,8],18:[2,6,9],19:[3,5,7],20:[3,6,8]})
Con_9_6_Part = (range(1,10),range(11,21))
Con_9_6_Graph = BipartiteGraph(Con_9_6_Data, Con_9_6_Part)
Con_9_6_Graph.name('Con-9-6')

Con_9_7_Data = Graph({11:[1,2,3], 12:[4,5,6], 13:[7,8,9], 14:[1,4,8], 15:[1,5,9],
                      16:[2,4,7], 17:[2,5,8], 18:[2,6,9], 19:[3,5,7], 20:[3,6,8],
                      21:[1,7,6]})
Con_9_7_Part = (range(1,10), range(11,22))
Con_9_7_Graph = BipartiteGraph(Con_9_7_Data,Con_9_7_Part)
Con_9_7_Graph.name('Con-9-7')

Con_9_8_Data = Graph({11:[1,2,3], 12:[4,5,6], 13:[7,8,9], 14:[1,4,8], 15:[1,5,9],
                      16:[2,4,7], 17:[2,5,8], 18:[2,6,9], 19:[3,5,7], 20:[3,6,8],
                      21:[1,7,6], 22:[3,9,4]})
Con_9_8_Part = (range(1,10), range(11,23))
Con_9_8_Graph = BipartiteGraph(Con_9_8_Data, Con_9_8_Part)
Con_9_8_Graph.name('Con-9-8')

Con_9_9_Data = Graph({11:[1,2,3],12:[3,4,5],13:[1,5,6,7],14:[1,4,8],15:[2,6,8],
                      16:[2,5,9],17:[3,7,8],18:[3,6,9],19:[4,7,9]})
Con_9_9_Part = (range(1,10),range(11,20))
Con_9_9_Graph = BipartiteGraph(Con_9_9_Data, Con_9_9_Part)
Con_9_9_Graph.name('Con-9-9')

Con_9_10_Data = Graph({11:[1,2,3,4],12:[4,5,6,7],13:[3,7,9],14:[2,7,8],15:[1,6,8],
                      16:[1,5,9],17:[2,6,9],18:[3,5,8],19:[4,8,9]})
Con_9_10_Part = (range(1,10),range(11,20))
Con_9_10_Graph = BipartiteGraph(Con_9_10_Data, Con_9_10_Part)
Con_9_10_Graph.name('Con-9-10')


Con_9_List = [Con_9_1_Graph, Con_9_2_Graph, Con_9_3_Graph, Con_9_4_Graph, Con_9_5_Graph,
         Con_9_6_Graph, Con_9_7_Graph, Con_9_8_Graph, Con_9_9_Graph, Con_9_10_Graph]

# [10_3,9_3] superconfigurations - the duals of the [9_3,10_3] superconfigurations

ConfigDual_9_4_Data = Graph({11:[1,3,4],12:[1,2,7],13:[1,5,6,8],14:[2,3,5],15:[5,9,10],
                             16:[4,6,10],17:[6,7,9],18:[3,7,8,10],19:[2,4,8,9]})
ConfigDual_9_4_Part = (range(1,11),range(11,20))
ConfigDual_9_4_Graph = BipartiteGraph(ConfigDual_9_4_Data, ConfigDual_9_4_Part)
ConfigDual_9_4_Graph.name('ConfigDual-9-4')

ConfigDual_9_5_Data = Graph({11:[1,2,3,4],12:[4,5,6,7],13:[1,7,8,9],14:[1,6,10],15:[2,6,8],
                             16:[2,5,9],17:[3,7,10],18:[3,5,8],19:[4,9,10]})
ConfigDual_9_5_Part = (range(1,11),range(11,20))
ConfigDual_9_5_Graph = BipartiteGraph(ConfigDual_9_5_Data, ConfigDual_9_5_Part)
ConfigDual_9_5_Graph.name('ConfigDual-9-5')

ConfigDual_9_6_Data = Graph({11:[1,6,7,8],12:[3,4,7,10],13:[2,8,10],14:[2,5,7,9],15:[1,4,5],
                             16:[3,6,9],17:[2,4,6],18:[3,5,8],19:[1,9,10]})
ConfigDual_9_6_Part = (range(1,11),range(11,20))
ConfigDual_9_6_Graph = BipartiteGraph(ConfigDual_9_6_Data, ConfigDual_9_6_Part)
ConfigDual_9_6_Graph.name('ConfigDual-9-6')

ConfigDual_10s = [ConfigDual_9_4_Graph, ConfigDual_9_5_Graph, ConfigDual_9_6_Graph]



#----- COLUMN 10 -------------------------------

# 10_0 CONFIGURATIONS


Con_10_0_1_Data = Graph ({11:[1,2,3], 12:[1,4,5], 13:[1,6,7], 14:[8,9,10], 15:[2,4,8], 16:[3,5,8], 17:[2,6,9],
                          18:[3,7,9], 19:[4,6,10], 20:[5,7,10]})
Con_10_0_1_Part = (range(1,11), range(11,21))
Con_10_0_1_Graph = BipartiteGraph(Con_10_0_1_Data, Con_10_0_1_Part)
Con_10_0_1_Graph.name('Con-10-0 #1 (Desargues)')

Con_10_0_2_Data = Graph({11:[1,2,3],
                           12:[1,4,5],
                           13:[1,6,7],
                           14:[8,9,10],
                           15:[2,4,8],
                           16:[3,7,8],
                          17:[2,6,9],
                          18:[3,5,9],
                          19:[4,6,10],
                          20:[5,7,10]})
Con_10_0_2_Part = (range(1,11), range(11,21))
Con_10_0_2_Graph = BipartiteGraph(Con_10_0_2_Data, Con_10_0_2_Part)
Con_10_0_2_Graph.name('Con-10-0 #2')

Con_10_0_3_Data = Graph({11:[1,2,3],
                         12:[1,4,5],
                         13:[1,6,7],
                         14:[8,9,10],
                         15:[2,4,8],
                         16:[3,6,8],
                         17:[2,7,9],
                         18:[3,5,9],
                         19:[4,6,10],
                         20:[5,7,10]})
Con_10_0_3_Part = (range(1,11),range(11,21))
Con_10_0_3_Graph = BipartiteGraph(Con_10_0_3_Data, Con_10_0_3_Part)
Con_10_0_3_Graph.name('Con-10-0 #3')

Con_10_0_4_Data = Graph({11:[1,2,3],
                      12:[1,4,5],
                      13:[1,6,7],
                      14:[8,9,10],
                      15:[2,4,8],
                      16:[3,6,8],
                      17:[2,5,9],
                      18:[3,7,9],
                      19:[4,6,10],
                      20:[5,7,10]})
Con_10_0_4_Part = (range(1,11),range(11,21))
Con_10_0_4_Graph = BipartiteGraph(Con_10_0_4_Data, Con_10_0_4_Part)
Con_10_0_4_Graph.name('Con-10-0 #4')

Con_10_0_5_Data = Graph({11:[1,2,3],
                          12:[1,4,5],
                          13:[1,6,7],
                          14:[8,9,10],
                          15:[2,4,8],
                          16:[3,7,8],
                          17:[2,5,9],
                          18:[4,6,9],
                          19:[3,6,10],
                          20:[5,7,10]})
Con_10_0_5_Part = (range(1,11),range(11,21))
Con_10_0_5_Graph = BipartiteGraph(Con_10_0_5_Data, Con_10_0_5_Part)
Con_10_0_5_Graph.name('Con-10-0 #5')

Con_10_0_6_Data = Graph({11:[1,2,3],
                          12:[1,4,5],
                          13:[1,6,7],
                          14:[8,9,10],
                          15:[2,4,8],
                          16:[3,7,8],
                          17:[2,6,9],
                          18:[5,7,9],
                          19:[3,5,10],
                          20:[4,6,10]})
Con_10_0_6_Part = (range(1,11),range(11,21))
Con_10_0_6_Graph = BipartiteGraph(Con_10_0_6_Data, Con_10_0_6_Part)
Con_10_0_6_Graph.name('Con-10-0 #6')

Con_10_0_7_Data = Graph({11:[1,2,3],
                          12:[1,4,5],
                          13:[1,6,7],
                          14:[2,8,9],
                          15:[4,8,10],
                          16:[6,9,10],
                          17:[5,7,8],
                          18:[3,5,9],
                          19:[7,3,10],
                          20:[2,4,6]})
Con_10_0_7_Part = (range(1,11),range(11,21))
Con_10_0_7_Graph = BipartiteGraph(Con_10_0_7_Data, Con_10_0_7_Part)
Con_10_0_7_Graph.name('Con-10-0 #7')

Con_10_0_8_Data = Graph({11:[1,2,3],
                          12:[1,4,5],
                          13:[1,6,7],
                          14:[3,8,9],
                          15:[5,8,10],
                          16:[7,9,10],
                          17:[2,7,8],
                          18:[6,5,9],
                          19:[4,3,10],
                          20:[2,4,6]})
Con_10_0_8_Part = (range(1,11),range(11,21))
Con_10_0_8_Graph = BipartiteGraph(Con_10_0_8_Data, Con_10_0_8_Part)
Con_10_0_8_Graph.name('Con-10-0 #8')

Con_10_0_9_Data = Graph({11:[1,2,3],
                          12:[1,4,5],
                          13:[1,6,7],
                          14:[2,8,9],
                          15:[4,8,10],
                          16:[6,9,10],
                          17:[5,7,8],
                          18:[3,5,9],
                          19:[2,7,10],
                          20:[3,4,6]})
Con_10_0_9_Part = (range(1,11),range(11,21))
Con_10_0_9_Graph = BipartiteGraph(Con_10_0_9_Data, Con_10_0_9_Part)
Con_10_0_9_Graph.name('Con-10-0 #9')

Con_10_0_10_Data = Graph({11:[1,2,3],
                           12:[1,4,5],
                           13:[1,6,7],
                           14:[3,8,9],
                           15:[2,8,10],
                           16:[7,9,10],
                           17:[5,7,8],
                           18:[6,5,9],
                           19:[4,3,10],
                           20:[2,4,6]})
Con_10_0_10_Part = (range(1,11),range(11,21))
Con_10_0_10_Graph = BipartiteGraph(Con_10_0_10_Data, Con_10_0_10_Part)
Con_10_0_10_Graph.name('Con-10-0 #10')

Con_10_0_List = [Con_10_0_1_Graph, Con_10_0_2_Graph, Con_10_0_3_Graph, Con_10_0_4_Graph,
            Con_10_0_5_Graph, Con_10_0_6_Graph, Con_10_0_7_Graph, Con_10_0_8_Graph,
            Con_10_0_9_Graph, Con_10_0_10_Graph]

# The following are the six basic configurations in "Box D" of the Basic Configurations chart.
# Namely, all basic configurations such that there are 10-11 lines, and 2 are of degree 4.

# The 2 degree-4 lines don't intersect:

BoxD311Data = Graph({1:[11,12,13],
                     2:[11,14,17], 3:[11,16,18], 4:[11,19,20],
                     5:[12,15,16], 6:[12,17,20], 7:[12,18,19],
                     8:[13,14,16,19], 9:[13,15,17,18],
                     10: [14,15,20]})
BoxD311Part = (range(1,11),range(11,21))
BoxD311Graph = BipartiteGraph (BoxD311Data, BoxD311Part)
BoxD311Graph.name('Con-10-2 Un. #1')

BoxD312Data = Graph({1:[11,12,13],
                     2:[11,14,17], 3:[11,16,18], 4:[11,19,20],
                     5:[12,15,16], 6:[12,17,20], 7:[12,18,19],
                     8:[13,14,16,20], 9:[13,15,17,18],
                     10: [14,15,19]})
BoxD312Part = (range(1,11),range(11,21))
BoxD312Graph = BipartiteGraph (BoxD312Data, BoxD312Part)
BoxD312Graph.name('Con-10-2 Un. #2')

BoxD321Data = Graph({1:[11,12,13],
                     2:[11,14,17],
                     3:[11,16,18],
                     4:[11,19,20],
                     5:[12,15,16],
                     6:[12,17,20],
                     7:[12,18,19],
                     8:[13,14,16,19],
                     9:[13,15,17],
                     10:[14,15,18,20]})
BoxD321Part = (range(1,11),range(11,21))
BoxD321Graph = BipartiteGraph (BoxD321Data, BoxD321Part)
BoxD321Graph.name('Con-10-2 Un. #3')

# The 2 degree-4 lines don't intersect:

DreidelData = Graph({1:[11,13,20], 2:[11,14,17], 3:[11,15,18], 4:[11,16,19],
                 5:[12,13,17], 6:[12,14,18], 7:[12,15,19], 8:[12,16,20],
                 9:[13,14,15,16], 10:[17,18,19,20]})
DreidelPart = (range(1,11),range(11,21))
DreidelGraph = BipartiteGraph(DreidelData, DreidelPart)
DreidelGraph.name('Con-10-2 Un. #4: Dreidel')

RobotData = Graph({1:[11,13,17], 2:[11,14,18], 3:[11,15,19], 4:[11,16,20],
                   5:[12,13,18], 6:[12,14,17], 7:[12,15,20], 8:[12,16,19],
                   9:[13,14,15,16], 10:[17,18,19,20]})
RobotPart = (range(1,11),range(11,21))
RobotGraph = BipartiteGraph(RobotData, RobotPart)
RobotGraph.name('Con-10-2 Un. #5: Robot')


Con_10_2_U_List = [BoxD311Graph, BoxD312Graph, BoxD321Graph, DreidelGraph, RobotGraph]


#Box 10,1 in the Chart, the "unreachable" 1D4 subset

Con_10_1_U_1 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [19, 17, 20], 6: [18, 15, 20], 7: [13, 16, 20], 8: [12, 19, 15], 9: [13, 14, 17], 10: [18, 12, 14, 16], 11: [1, 2, 0, 3, 4], 12: [1, 10, 0, 8], 13: [9, 1, 0, 7], 14: [9, 10, 2, 0], 15: [2, 0, 6, 8], 16: [10, 0, 3, 7], 17: [9, 0, 3, 5], 18: [10, 0, 4, 6], 19: [0, 4, 5, 8], 20: [0, 5, 6, 7]}
Con_10_1_U_2 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [19, 17, 20], 6: [18, 15, 20], 7: [13, 16, 20], 8: [19, 13, 14], 9: [12, 15, 17], 10: [18, 12, 14, 16], 11: [1, 2, 0, 3, 4], 12: [9, 1, 10, 0], 13: [1, 0, 7, 8], 14: [10, 2, 0, 8], 15: [9, 2, 0, 6], 16: [10, 0, 3, 7], 17: [9, 0, 3, 5], 18: [10, 0, 4, 6], 19: [0, 4, 5, 8], 20: [0, 5, 6, 7]}
Con_10_1_U_3 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [19, 17, 20], 6: [18, 15, 20], 7: [13, 14, 20], 8: [19, 13, 16], 9: [12, 15, 17], 10: [18, 12, 14, 16], 11: [1, 2, 0, 3, 4], 12: [9, 1, 10, 0], 13: [1, 0, 7, 8], 14: [10, 2, 0, 7], 15: [9, 2, 0, 6], 16: [10, 0, 3, 8], 17: [9, 0, 3, 5], 18: [10, 0, 4, 6], 19: [0, 4, 5, 8], 20: [0, 5, 6, 7]}
Con_10_1_U_4 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [19, 14, 20], 6: [18, 17, 20], 7: [12, 15, 20], 8: [19, 13, 17], 9: [13, 15, 16], 10: [18, 12, 14, 16], 11: [1, 2, 0, 3, 4], 12: [1, 10, 0, 7], 13: [9, 1, 0, 8], 14: [10, 2, 0, 5], 15: [9, 2, 0, 7], 16: [9, 10, 0, 3], 17: [0, 3, 6, 8], 18: [10, 0, 4, 6], 19: [0, 4, 5, 8], 20: [0, 5, 6, 7]}
Con_10_1_U_5 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [19, 16, 20], 6: [18, 17, 20], 7: [13, 15, 20], 8: [12, 19, 15], 9: [13, 14, 17], 10: [18, 12, 14, 16], 11: [1, 2, 0, 3, 4], 12: [1, 10, 0, 8], 13: [9, 1, 0, 7], 14: [9, 10, 2, 0], 15: [2, 0, 7, 8], 16: [10, 0, 3, 5], 17: [9, 0, 3, 6], 18: [10, 0, 4, 6], 19: [0, 4, 5, 8], 20: [0, 5, 6, 7]}
Con_10_1_U_6 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [19, 16, 20], 6: [18, 17, 20], 7: [12, 15, 20], 8: [19, 13, 15], 9: [13, 14, 17], 10: [18, 12, 14, 16], 11: [1, 2, 0, 3, 4], 12: [1, 10, 0, 7], 13: [9, 1, 0, 8], 14: [9, 10, 2, 0], 15: [2, 0, 7, 8], 16: [10, 0, 3, 5], 17: [9, 0, 3, 6], 18: [10, 0, 4, 6], 19: [0, 4, 5, 8], 20: [0, 5, 6, 7]}
Con_10_1_U_7 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [12, 19, 20], 6: [18, 17, 20], 7: [15, 16, 20], 8: [19, 13, 15], 9: [13, 14, 17], 10: [18, 12, 14, 16], 11: [1, 2, 0, 3, 4], 12: [1, 10, 0, 5], 13: [9, 1, 0, 8], 14: [9, 10, 2, 0], 15: [2, 0, 7, 8], 16: [10, 0, 3, 7], 17: [9, 0, 3, 6], 18: [10, 0, 4, 6], 19: [0, 4, 5, 8], 20: [0, 5, 6, 7]}
Con_10_1_U_8 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [19, 17, 20], 6: [18, 15, 20], 7: [19, 13, 14], 8: [18, 12, 17], 9: [13, 15, 16], 10: [12, 14, 16, 20], 11: [1, 2, 0, 3, 4], 12: [1, 10, 0, 8], 13: [9, 1, 0, 7], 14: [10, 2, 0, 7], 15: [9, 2, 0, 6], 16: [9, 10, 0, 3], 17: [0, 3, 5, 8], 18: [0, 4, 6, 8], 19: [0, 4, 5, 7], 20: [10, 0, 5, 6]}
Con_10_1_U_9 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [19, 17, 20], 6: [18, 15, 20], 7: [19, 13, 16], 8: [18, 13, 14], 9: [12, 15, 17], 10: [12, 14, 16, 20], 11: [1, 2, 0, 3, 4], 12: [9, 1, 10, 0], 13: [1, 0, 7, 8], 14: [10, 2, 0, 8], 15: [9, 2, 0, 6], 16: [10, 0, 3, 7], 17: [9, 0, 3, 5], 18: [0, 4, 6, 8], 19: [0, 4, 5, 7], 20: [10, 0, 5, 6]}
Con_10_1_U_10 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [19, 17, 20], 6: [18, 15, 20], 7: [19, 13, 14], 8: [18, 13, 16], 9: [12, 15, 17], 10: [12, 14, 16, 20], 11: [1, 2, 0, 3, 4], 12: [9, 1, 10, 0], 13: [1, 0, 7, 8], 14: [10, 2, 0, 7], 15: [9, 2, 0, 6], 16: [10, 0, 3, 8], 17: [9, 0, 3, 5], 18: [0, 4, 6, 8], 19: [0, 4, 5, 7], 20: [10, 0, 5, 6]}
Con_10_1_U_11 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [19, 17, 20], 6: [13, 15, 20], 7: [19, 15, 16], 8: [18, 12, 17], 9: [18, 13, 14], 10: [12, 14, 16, 20], 11: [1, 2, 0, 3, 4], 12: [1, 10, 0, 8], 13: [9, 1, 0, 6], 14: [9, 10, 2, 0], 15: [2, 0, 6, 7], 16: [10, 0, 3, 7], 17: [0, 3, 5, 8], 18: [9, 0, 4, 8], 19: [0, 4, 5, 7], 20: [10, 0, 5, 6]}
Con_10_1_U_12 = {1: [11, 12, 13], 2: [11, 14, 15], 3: [11, 16, 17], 4: [11, 18, 19], 5: [19, 17, 20], 6: [13, 15, 20], 7: [12, 19, 15], 8: [18, 14, 17], 9: [18, 13, 16], 10: [12, 14, 16, 20], 11: [1, 2, 0, 3, 4], 12: [1, 10, 0, 7], 13: [9, 1, 0, 6], 14: [10, 2, 0, 8], 15: [2, 0, 6, 7], 16: [9, 10, 0, 3], 17: [0, 3, 5, 8], 18: [9, 0, 4, 8], 19: [0, 4, 5, 7], 20: [10, 0, 5, 6]}

Con_10_1_U_1_Graph = BipartiteGraph(Graph(Con_10_1_U_1), (range(1,11), range(11,21)))
Con_10_1_U_2_Graph = BipartiteGraph(Graph(Con_10_1_U_2), (range(1,11), range(11,21)))
Con_10_1_U_3_Graph = BipartiteGraph(Graph(Con_10_1_U_3), (range(1,11), range(11,21)))
Con_10_1_U_4_Graph = BipartiteGraph(Graph(Con_10_1_U_4), (range(1,11), range(11,21)))
Con_10_1_U_5_Graph = BipartiteGraph(Graph(Con_10_1_U_5), (range(1,11), range(11,21)))
Con_10_1_U_6_Graph = BipartiteGraph(Graph(Con_10_1_U_6), (range(1,11), range(11,21)))
Con_10_1_U_7_Graph = BipartiteGraph(Graph(Con_10_1_U_7), (range(1,11), range(11,21)))
Con_10_1_U_8_Graph = BipartiteGraph(Graph(Con_10_1_U_8), (range(1,11), range(11,21)))
Con_10_1_U_9_Graph = BipartiteGraph(Graph(Con_10_1_U_9), (range(1,11), range(11,21)))
Con_10_1_U_10_Graph = BipartiteGraph(Graph(Con_10_1_U_10), (range(1,11), range(11,21)))
Con_10_1_U_11_Graph = BipartiteGraph(Graph(Con_10_1_U_11), (range(1,11), range(11,21)))
Con_10_1_U_12_Graph = BipartiteGraph(Graph(Con_10_1_U_12), (range(1,11), range(11,21)))

Con_10_1_U_1_Graph.name("Con-10-1 Un. #1")
Con_10_1_U_2_Graph.name("Con-10-1 Un. #2")
Con_10_1_U_3_Graph.name("Con-10-1 Un. #3")
Con_10_1_U_4_Graph.name("Con-10-1 Un. #4")
Con_10_1_U_5_Graph.name("Con-10-1 Un. #5")
Con_10_1_U_6_Graph.name("Con-10-1 Un. #6")
Con_10_1_U_7_Graph.name("Con-10-1 Un. #7")
Con_10_1_U_8_Graph.name("Con-10-1 Un. #8")
Con_10_1_U_9_Graph.name("Con-10-1 Un. #9")
Con_10_1_U_10_Graph.name("Con-10-1 Un. #10")
Con_10_1_U_11_Graph.name("Con-10-1 Un. #11")
Con_10_1_U_12_Graph.name("Con-10-1 Un. #12")

Con_10_1_U_List = [Con_10_1_U_1_Graph, Con_10_1_U_2_Graph, Con_10_1_U_3_Graph, Con_10_1_U_4_Graph, Con_10_1_U_5_Graph, Con_10_1_U_6_Graph, Con_10_1_U_7_Graph, Con_10_1_U_8_Graph, Con_10_1_U_9_Graph, Con_10_1_U_10_Graph, Con_10_1_U_11_Graph, Con_10_1_U_12_Graph]



Con_10_1_R_1 = {1: [11, 12, 13], 2: [11, 17, 15], 3: [11, 16, 18], 4: [12, 19, 15], 5: [12, 16, 20], 6: [19, 13, 17], 7: [13, 18, 20], 8: [14, 15, 16], 9: [14, 17, 18], 10: [11, 14, 19, 20], 11: [1, 10, 2, 0, 3], 12: [1, 0, 4, 5], 13: [1, 0, 6, 7], 14: [9, 10, 0, 8], 15: [2, 0, 4, 8], 16: [0, 3, 5, 8], 17: [9, 2, 0, 6], 18: [9, 0, 3, 7], 19: [10, 0, 4, 6], 20: [10, 0, 5, 7]}
Con_10_1_R_2 ={1: [11, 12, 13], 2: [11, 17, 15], 3: [11, 16, 18], 4: [12, 19, 15], 5: [12, 18, 20], 6: [19, 13, 17], 7: [13, 16, 20], 8: [14, 15, 16], 9: [14, 17, 18], 10: [11, 14, 19, 20], 11: [1, 10, 2, 0, 3], 12: [1, 0, 4, 5], 13: [1, 0, 6, 7], 14: [9, 10, 0, 8], 15: [2, 0, 4, 8], 16: [0, 3, 7, 8], 17: [9, 2, 0, 6], 18: [9, 0, 3, 5], 19: [10, 0, 4, 6], 20: [10, 0, 5, 7]}
Con_10_1_R_3 ={1: [11, 12, 13, 14], 2: [11, 17, 15], 3: [11, 18, 16], 4: [12, 19, 15], 5: [18, 12, 20], 6: [19, 13, 17], 7: [13, 16, 20], 8: [14, 15, 16], 9: [18, 14, 17], 10: [19, 14, 20], 11: [1, 0, 2, 3], 12: [1, 0, 4, 5], 13: [1, 0, 6, 7], 14: [9, 1, 10, 0, 8], 15: [0, 2, 4, 8], 16: [0, 3, 7, 8], 17: [9, 0, 2, 6], 18: [9, 0, 3, 5], 19: [10, 0, 4, 6], 20: [10, 0, 5, 7]}
Con_10_1_R_4 ={1: [11, 12, 13], 2: [11, 17, 15], 3: [11, 16, 18], 4: [12, 19, 15], 5: [12, 18, 20], 6: [19, 13, 16], 7: [13, 17, 20], 8: [14, 15, 16], 9: [14, 17, 18], 10: [11, 14, 19, 20], 11: [1, 10, 2, 0, 3], 12: [1, 0, 4, 5], 13: [1, 0, 6, 7], 14: [9, 10, 0, 8], 15: [2, 0, 4, 8], 16: [0, 3, 6, 8], 17: [9, 2, 0, 7], 18: [9, 0, 3, 5], 19: [10, 0, 4, 6], 20: [10, 0, 5, 7]}
#Con_10_1_R_5 ={1: [12, 11, 13, 100], 2: [11, 17, 100, 15], 3: [11, 100, 16, 18], 4: [12, 19, 100, 15], 5: [12, 100, 18, 20], 6: [13, 19, 100, 16], 7: [13, 17, 100, 20], 8: [100, 15, 16, 14], 9: [17, 100, 18, 14], 10: [11, 19, 100, 20, 14], 11: [1, 2, 3, 10], 12: [1, 4, 5], 13: [1, 7, 6], 14: [9, 8, 10], 15: [2, 4, 8], 16: [3, 6, 8], 17: [7, 9, 2], 18: [9, 3, 5], 19: [4, 6, 10], 20: [7, 5, 10]}
Con_10_1_R_6 ={1: [11, 12, 13], 2: [11, 17, 15], 3: [11, 16, 18], 4: [12, 19, 15], 5: [12, 17, 20], 6: [19, 13, 16], 7: [13, 18, 20], 8: [14, 15, 16], 9: [14, 17, 18], 10: [11, 14, 19, 20], 11: [1, 10, 2, 0, 3], 12: [1, 0, 4, 5], 13: [1, 0, 6, 7], 14: [9, 10, 0, 8], 15: [2, 0, 4, 8], 16: [0, 3, 6, 8], 17: [9, 2, 0, 5], 18: [9, 0, 3, 7], 19: [10, 0, 4, 6], 20: [10, 0, 5, 7]}
Con_10_1_R_7 ={1: [11, 12, 13, 14], 2: [11, 17, 15], 3: [11, 19, 16], 4: [18, 12, 15], 5: [12, 17, 20], 6: [18, 19, 13], 7: [13, 16, 20], 8: [14, 15, 16], 9: [18, 14, 17], 10: [19, 14, 20], 11: [1, 0, 2, 3], 12: [1, 0, 4, 5], 13: [1, 0, 6, 7], 14: [9, 1, 10, 0, 8], 15: [0, 2, 4, 8], 16: [0, 3, 7, 8], 17: [9, 0, 2, 5], 18: [9, 0, 4, 6], 19: [10, 0, 3, 6], 20: [10, 0, 5, 7]}
Con_10_1_R_8 ={1: [11, 12, 13, 14], 2: [11, 17, 15], 3: [11, 19, 16], 4: [12, 15, 20], 5: [18, 12, 19], 6: [13, 17, 20], 7: [18, 13, 16], 8: [14, 15, 16], 9: [18, 14, 17], 10: [19, 14, 20], 11: [1, 0, 2, 3], 12: [1, 0, 4, 5], 13: [1, 0, 6, 7], 14: [9, 1, 10, 0, 8], 15: [0, 2, 4, 8], 16: [0, 3, 7, 8], 17: [9, 0, 2, 6], 18: [9, 0, 5, 7], 19: [10, 0, 3, 5], 20: [10, 0, 4, 6]}

Con_10_1_R_1Graph = BipartiteGraph(Graph(Con_10_1_R_1), (range(1,11), range(11,21)))
Con_10_1_R_2Graph = BipartiteGraph(Graph(Con_10_1_R_2), (range(1,11), range(11,21)))
Con_10_1_R_3Graph = BipartiteGraph(Graph(Con_10_1_R_3), (range(1,11), range(11,21)))
Con_10_1_R_4Graph = BipartiteGraph(Graph(Con_10_1_R_4), (range(1,11), range(11,21)))
#Con_10_1_R_5Graph = BipartiteGraph(Graph(Con_10_1_R_5), (range(1,11), range(11,21)))
Con_10_1_R_6Graph = BipartiteGraph(Graph(Con_10_1_R_6), (range(1,11), range(11,21)))
Con_10_1_R_7Graph = BipartiteGraph(Graph(Con_10_1_R_7), (range(1,11), range(11,21)))
Con_10_1_R_8Graph = BipartiteGraph(Graph(Con_10_1_R_8), (range(1,11), range(11,21)))

Con_10_1_R_1Graph.name('Con-10-1-R #1')
Con_10_1_R_2Graph.name('Con-10-1-R #2')
Con_10_1_R_3Graph.name('Con-10-1-R #3')
Con_10_1_R_4Graph.name('Con-10-1-R #4')
#Con_10_1_R_5Graph.name('Con-10-1-R #5')
Con_10_1_R_6Graph.name('Con-10-1-R #6 (Anti-Desargues No. 1)')
Con_10_1_R_7Graph.name('Con-10-1-R #7')
Con_10_1_R_8Graph.name('Con-10-1-R #8')

Con_10_1_R_List = [Con_10_1_R_1Graph,
Con_10_1_R_2Graph,
Con_10_1_R_3Graph,
Con_10_1_R_4Graph,
#Con_10_1_R_5Graph,
Con_10_1_R_6Graph,
Con_10_1_R_7Graph,
Con_10_1_R_8Graph]


Con_10_1_List = Con_10_1_R_List + Con_10_1_U_List



Con_10_2_R_1 = {1: [11, 12, 13],
                2: [17, 11, 15], 3: [16, 18, 11], 4: [19, 12, 15], 5: [16, 20, 12], 6: [17, 19, 13], 7: [18, 20, 13], 8: [16, 14, 15], 9: [17, 18, 12, 14], 10: [19, 20, 11, 14], 11: [10, 1, 2, 3], 12: [1, 4, 5, 9], 13: [1, 6, 7], 14: [10, 8, 9], 15: [2, 4, 8], 16: [3, 5, 8], 17: [2, 6, 9], 18: [3, 7, 9], 19: [10, 4, 6], 20: [10, 5, 7]}
Con_10_2_R_2 = {1: [11, 12, 13, 14],
                2: [17, 11, 15], 3: [16, 18, 19, 11], 4: [19, 12, 15], 5: [18, 20, 12], 6: [17, 19, 13], 7: [16, 20, 13], 8: [16, 14, 15], 9: [17, 18, 14], 10: [19, 20, 14], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [10, 1, 8, 9], 15: [2, 4, 8], 16: [3, 7, 8], 17: [2, 6, 9], 18: [3, 5, 9], 19: [10, 3, 4, 6], 20: [10, 5, 7]}
Con_10_2_R_3 = {1: [11, 12, 13],
 2: [17, 11, 15], 3: [16, 18, 11], 4: [19, 12, 15], 5: [17, 20, 12], 6: [16, 19, 13], 7: [18, 20, 13, 15], 8: [16, 14, 15], 9: [17, 18, 14], 10: [19, 20, 11, 14], 11: [10, 1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [10, 8, 9], 15: [2, 4, 7, 8], 16: [3, 6, 8], 17: [2, 5, 9], 18: [3, 7, 9], 19: [10, 4, 6], 20: [10, 5, 7]}
Con_10_2_R_4 = {1: [11, 12, 13],
 2: [11, 14, 15], 3: [16, 17, 11], 4: [18, 19, 11], 5: [17, 19, 20], 6: [18, 20, 15], 7: [20, 13, 14], 8: [16, 19, 13, 15], 9: [17, 12, 15], 10: [16, 18, 12, 14], 11: [1, 2, 3, 4], 12: [10, 1, 9], 13: [1, 7, 8], 14: [10, 2, 7], 15: [2, 6, 8, 9], 16: [10, 3, 8], 17: [3, 5, 9], 18: [10, 4, 6], 19: [4, 5, 8], 20: [5, 6, 7]}
Con_10_2_R_5 = {1: [11, 12, 13],
 2: [11, 14, 15], 3: [16, 17, 11], 4: [18, 19, 11], 5: [16, 19, 20], 6: [17, 18, 20], 7: [20, 13, 15], 8: [17, 19, 12, 15], 9: [17, 13, 14], 10: [16, 18, 12, 14], 11: [1, 2, 3, 4], 12: [10, 1, 8], 13: [1, 7, 9], 14: [10, 2, 9], 15: [2, 7, 8], 16: [10, 3, 5], 17: [3, 6, 8, 9], 18: [10, 4, 6], 19: [4, 5, 8], 20: [5, 6, 7]}
Con_10_2_R_6 = {1: [11, 12, 13],
 2: [11, 14, 15], 3: [16, 17, 11], 4: [18, 19, 11], 5: [17, 19, 20], 6: [18, 20, 15], 7: [16, 19, 13, 15], 8: [18, 13, 14], 9: [17, 12, 15], 10: [16, 20, 12, 14], 11: [1, 2, 3, 4], 12: [10, 1, 9], 13: [1, 7, 8], 14: [10, 2, 8], 15: [2, 6, 7, 9], 16: [10, 3, 7], 17: [3, 5, 9], 18: [4, 6, 8], 19: [4, 5, 7], 20: [10, 5, 6]}
Con_10_2_R_7 = {1: [11, 12, 13],
 2: [11, 14, 15], 3: [16, 17, 11], 4: [18, 19, 11], 5: [17, 19, 20], 6: [20, 13, 15], 7: [16, 19, 15], 8: [17, 18, 12, 15], 9: [18, 13, 14], 10: [16, 20, 12, 14], 11: [1, 2, 3, 4], 12: [10, 1, 8], 13: [1, 6, 9], 14: [10, 2, 9], 15: [2, 6, 7, 8], 16: [10, 3, 7], 17: [3, 5, 8], 18: [4, 8, 9], 19: [4, 5, 7], 20: [10, 5, 6]}

Con_10_2_R_1_Graph = BipartiteGraph(Graph(Con_10_2_R_1), (range(1,11),range(11,21)))
Con_10_2_R_2_Graph = BipartiteGraph(Graph(Con_10_2_R_2), (range(1,11),range(11,21)))
Con_10_2_R_3_Graph = BipartiteGraph(Graph(Con_10_2_R_3), (range(1,11),range(11,21)))
Con_10_2_R_4_Graph = BipartiteGraph(Graph(Con_10_2_R_4), (range(1,11),range(11,21)))
Con_10_2_R_5_Graph = BipartiteGraph(Graph(Con_10_2_R_5), (range(1,11),range(11,21)))
Con_10_2_R_6_Graph = BipartiteGraph(Graph(Con_10_2_R_6), (range(1,11),range(11,21)))
Con_10_2_R_7_Graph = BipartiteGraph(Graph(Con_10_2_R_7), (range(1,11),range(11,21)))

Con_10_2_R_1_Graph.name('Con-10-2 R #1')
Con_10_2_R_2_Graph.name('Con-10-2 R #2')
Con_10_2_R_3_Graph.name('Con-10-2 R #3 (Anti-Desargues No. 2)')
Con_10_2_R_4_Graph.name('Con-10-2 R #4')
Con_10_2_R_5_Graph.name('Con-10-2 R #5')
Con_10_2_R_6_Graph.name('Con-10-2 R #6')
Con_10_2_R_7_Graph.name('Con-10-2 R #7')

Con_10_2_R_List = [Con_10_2_R_1_Graph, Con_10_2_R_2_Graph, Con_10_2_R_3_Graph, Con_10_2_R_4_Graph, Con_10_2_R_5_Graph, Con_10_2_R_6_Graph, Con_10_2_R_7_Graph]

Con_10_2_List = Con_10_2_U_List + Con_10_2_R_List





Con_10_3_1 = {1: [11, 12, 13],
              2: [17, 11, 15], 3: [16, 18, 11], 4: [19, 12, 15], 5: [16, 20, 12], 6: [17, 19, 13], 7: [18, 20, 13], 8: [16, 13, 14, 15], 9: [17, 18, 12, 14], 10: [19, 20, 11, 14], 11: [10, 1, 2, 3], 12: [1, 4, 5, 9], 13: [1, 6, 7, 8], 14: [10, 8, 9], 15: [2, 4, 8], 16: [3, 5, 8], 17: [2, 6, 9], 18: [3, 7, 9], 19: [10, 4, 6], 20: [10, 5, 7]}
Con_10_3_2 = {1: [11, 12, 13],
              2: [17, 11, 15], 3: [16, 18, 11], 4: [19, 12, 15], 5: [16, 20, 12], 6: [17, 19, 13], 7: [18, 20, 13, 15], 8: [16, 14, 15], 9: [17, 18, 12, 14], 10: [19, 20, 11, 14], 11: [10, 1, 2, 3], 12: [1, 4, 5, 9], 13: [1, 6, 7], 14: [10, 8, 9], 15: [2, 4, 7, 8], 16: [3, 5, 8], 17: [2, 6, 9], 18: [3, 7, 9], 19: [10, 4, 6], 20: [10, 5, 7]}
Con_10_3_3 = {1: [11, 12, 13, 14],
              2: [17, 20, 11, 15], 3: [16, 18, 19, 11], 4: [19, 12, 15], 5: [18, 20, 12], 6: [17, 19, 13], 7: [16, 20, 13], 8: [16, 14, 15], 9: [17, 18, 14], 10: [19, 20, 14], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [10, 1, 8, 9], 15: [2, 4, 8], 16: [3, 7, 8], 17: [2, 6, 9], 18: [3, 5, 9], 19: [10, 3, 4, 6], 20: [10, 2, 5, 7]}
Con_10_3_4 = {1: [11, 12, 13],
              2: [17, 11, 15], 3: [16, 18, 11], 4: [19, 12, 15], 5: [16, 17, 20, 12], 6: [16, 19, 13], 7: [18, 20, 13, 15], 8: [16, 14, 15], 9: [17, 18, 14], 10: [19, 20, 11, 14], 11: [10, 1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [10, 8, 9], 15: [2, 4, 7, 8], 16: [3, 5, 6, 8], 17: [2, 5, 9], 18: [3, 7, 9], 19: [10, 4, 6], 20: [10, 5, 7]}
Con_10_3_5 = {1: [11, 12, 13],
              2: [11, 14, 15], 3: [16, 17, 11], 4: [18, 19, 11], 5: [17, 19, 20], 6: [18, 20, 15], 7: [16, 19, 13, 15], 8: [17, 18, 13, 14], 9: [17, 12, 15], 10: [16, 20, 12, 14], 11: [1, 2, 3, 4], 12: [10, 1, 9], 13: [1, 7, 8], 14: [10, 2, 8], 15: [2, 6, 7, 9], 16: [10, 3, 7], 17: [3, 5, 8, 9], 18: [4, 6, 8], 19: [4, 5, 7], 20: [10, 5, 6]}

Con_10_3_1_Graph = BipartiteGraph(Graph(Con_10_3_1), (range(1,11), range(11,21)))
Con_10_3_2_Graph = BipartiteGraph(Graph(Con_10_3_2), (range(1,11), range(11,21)))
Con_10_3_3_Graph = BipartiteGraph(Graph(Con_10_3_3), (range(1,11), range(11,21)))
Con_10_3_4_Graph = BipartiteGraph(Graph(Con_10_3_4), (range(1,11), range(11,21)))
Con_10_3_5_Graph = BipartiteGraph(Graph(Con_10_3_5), (range(1,11), range(11,21)))

Con_10_3_1_Graph.name('Con-10-3 #1')
Con_10_3_2_Graph.name('Con-10-3 #2')
Con_10_3_3_Graph.name('Con-10-3 #3')
Con_10_3_4_Graph.name('Con-10-3 #4 (UberFano / Anti-Desargues No. 3)')
Con_10_3_5_Graph.name('Con-10-3 #5')

Con_10_3_List = [Con_10_3_1_Graph, Con_10_3_2_Graph, Con_10_3_3_Graph, Con_10_3_4_Graph, Con_10_3_5_Graph]



# Box 11_0 (a.k.a. "Box C") ------------------------------


#Box C Configuration A Graphs
#7 of them

Con_11_0_1 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 20, 11],
              4: [16, 18, 12], 5: [17, 19, 12], 6: [16, 20, 13],
              7: [17, 21, 13], 8: [19, 14, 15], 9: [21, 20, 14], 10: [18, 21, 15]}
Con_11_0_2 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 20, 11],
              4: [16, 18, 12], 5: [17, 19, 12], 6: [16, 21, 13], 7: [17, 20, 13],
              8: [19, 14, 15], 9: [21, 20, 14], 10: [18, 21, 15]}
Con_11_0_3 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 20, 11],
              4: [16, 18, 12], 5: [17, 19, 12], 6: [16, 20, 13], 7: [17, 21, 13],
              8: [20, 14, 15], 9: [19, 21, 14], 10: [18, 21, 15]}
Con_11_0_4 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 20, 11],
 4: [16, 18, 12], 5: [17, 21, 12], 6: [16, 19, 13], 7: [17, 20, 13],
 8: [19, 14, 15], 9: [21, 20, 14], 10: [18, 21, 15]}
Con_11_0_5 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 20, 11],
 4: [16, 18, 12], 5: [17, 19, 12], 6: [16, 19, 13], 7: [21, 20, 13],
 8: [20, 14, 15], 9: [17, 21, 14], 10: [18, 21, 15]}
Con_11_0_6 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 20, 11],
 4: [16, 19, 12], 5: [17, 18, 12], 6: [16, 20, 13], 7: [19, 21, 13],
 8: [20, 14, 15], 9: [17, 21, 14], 10: [18, 21, 15]}
Con_11_0_7 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 20, 11],
 4: [16, 19, 12], 5: [17, 20, 12], 6: [16, 18, 13], 7: [19, 21, 13],
 8: [20, 14, 15], 9: [17, 21, 14], 10: [18, 21, 15]}


# Box C configuration B graphs
#There are 4 total
Con_11_0_8 = {1: [11, 12, 13, 14], 
                          2: [16, 17, 18, 15], 
                          3: [19, 20, 11, 15], 
                          4: [21, 12, 15], 
                          5: [17, 21, 11], 
                          6: [17, 19, 12], 
                          7: [18, 19, 13], 
                          8: [16, 20, 13], 
                          9: [18, 20, 14], 
                          10: [16, 21, 14]}
Con_11_0_9 = {1: [11, 12, 13, 14], 
                          2: [16, 17, 18, 15], 
                          3: [19, 20, 11, 15], 
                          4: [21, 12, 15], 
                          5: [17, 21, 11], 
                          6: [18, 19, 12], 
                          7: [17, 19, 13], 
                          8: [16, 20, 13], 
                          9: [18, 20, 14], 
                          10: [16, 21, 14]}
Con_11_0_10 = {1: [11, 12, 13, 14], 
                          2: [16, 17, 18, 15], 
                          3: [19, 20, 11, 15], 
                          4: [21, 12, 15],
                          5: [17, 21, 11],
                          6: [18, 19, 12], 
                          7: [17, 20, 13],
                          8: [16, 19, 13],
                          9: [18, 20, 14],
                          10: [16, 21, 14]}
Con_11_0_11 = {1: [11, 12, 13, 14], 
                          2: [16, 17, 18, 15], 
                          3: [19, 20, 11, 15], 
                          4: [21, 12, 15], 
                          5: [17, 21, 11],
                          6: [18, 19, 12],
                          7: [17, 20, 13], 
                          8: [16, 19, 13], 
                          9: [18, 21, 14], 
                          10: [16, 20, 14]}


#Box C Configuration C
#9 of them

Con_11_0_12 = {1: [11, 12, 13, 14], 2: [16, 17, 12, 15], 3: [18, 19, 11, 15],
               4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 21, 12], 7: [16, 21, 13],
               8: [17, 19, 13], 9: [16, 19, 14], 10: [18, 20, 14], 11: [1, 3, 5],
               12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9],
               17: [2, 5, 8], 18: [10, 3, 6], 19: [3, 8, 9], 20: [10, 4, 5], 21: [4, 6, 7]}
Con_11_0_13 = {1: [11, 12, 13, 14], 2: [16, 17, 12, 15], 3: [18, 19, 11, 15],
               4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 21, 12], 7: [16, 21, 13], 8: [17, 19, 13], 9: [16, 18, 14], 10: [19, 20, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 9], 19: [10, 3, 8], 20: [10, 4, 5], 21: [4, 6, 7]}
Con_11_0_14 = {1: [11, 12, 13, 14], 2: [16, 17, 12, 15], 3: [18, 19, 11, 15],
               4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 21, 12], 7: [16, 19, 13], 8: [17, 18, 13], 9: [16, 21, 14], 10: [19, 20, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 8], 19: [10, 3, 7], 20: [10, 4, 5], 21: [4, 6, 9]}
Con_11_0_15 = {1: [11, 12, 13, 14], 2: [16, 17, 12, 15], 3: [18, 19, 11, 15],
               4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 21, 12], 7: [16, 18, 13], 8: [17, 19, 13], 9: [16, 21, 14], 10: [19, 20, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 7], 19: [10, 3, 8], 20: [10, 4, 5], 21: [4, 6, 9]}
Con_11_0_16 = {1: [11, 12, 13, 14], 2: [16, 17, 12, 15], 3: [18, 19, 11, 15],
               4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 21, 12], 7: [16, 20, 13], 8: [17, 19, 13], 9: [16, 18, 14], 10: [19, 21, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 9], 19: [10, 3, 8], 20: [4, 5, 7], 21: [10, 4, 6]}
Con_11_0_17 = {1: [11, 12, 13, 14], 2: [16, 17, 12, 15], 3: [18, 19, 11, 15],
               4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 21, 12], 7: [16, 19, 13], 8: [17, 18, 13], 9: [16, 20, 14], 10: [19, 21, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 8], 19: [10, 3, 7], 20: [4, 5, 9], 21: [10, 4, 6]}
Con_11_0_18 = {1: [11, 12, 13, 14], 2: [16, 17, 12, 15], 3: [18, 19, 11, 15],
               4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 21, 12], 7: [16, 18, 13], 8: [17, 19, 13], 9: [16, 20, 14], 10: [19, 21, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 7], 19: [10, 3, 8], 20: [4, 5, 9], 21: [10, 4, 6]}
Con_11_0_19 = {1: [11, 12, 13, 14], 2: [16, 17, 12, 15], 3: [18, 19, 11, 15],
               4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 20, 12], 7: [16, 21, 13], 8: [17, 19, 13], 9: [16, 19, 14], 10: [18, 21, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [10, 3, 6], 19: [3, 8, 9], 20: [4, 5, 6], 21: [10, 4, 7]}
Con_11_0_20 = {1: [11, 12, 13, 14], 2: [16, 17, 12, 15], 3: [18, 19, 11, 15],
               4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 20, 12], 7: [16, 21, 13], 8: [17, 19, 13], 9: [16, 18, 14], 10: [19, 21, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 9], 19: [10, 3, 8], 20: [4, 5, 6], 21: [10, 4, 7]}


#Box C, Configuration D
#23 of them (generated by program only, not checked by hand)

Con_11_0_21 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 12, 15],
               4: [20, 13, 15], 5: [16, 20, 12], 6: [18, 21, 11], 7: [16, 19, 13], 8: [17, 18, 14], 9: [19, 21, 14], 10: [17, 21, 20]}
Con_11_0_22 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 12, 15],
               4: [20, 13, 15], 5: [16, 21, 12], 6: [18, 20, 11], 7: [16, 19, 13], 8: [17, 18, 14], 9: [19, 21, 14], 10: [17, 21, 20]}
Con_11_0_23 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [18, 21, 11], 7: [16, 19, 13], 8: [17, 18, 14], 9: [19, 20, 14], 10: [17, 21, 20]}
Con_11_0_24 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 20, 12], 6: [18, 21, 11], 7: [16, 21, 13], 8: [17, 18, 14], 9: [19, 20, 14], 10: [17, 19, 21]}
Con_11_0_25 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [18, 20, 11], 7: [16, 19, 13], 8: [17, 19, 14], 9: [18, 21, 14], 10: [17, 21, 20]}
Con_11_0_26 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [18, 21, 11], 7: [16, 19, 13], 8: [17, 19, 14], 9: [18, 20, 14], 10: [17, 21, 20]}
Con_11_0_27 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [18, 20, 11], 7: [16, 19, 13], 8: [17, 20, 14], 9: [18, 21, 14], 10: [17, 19, 21]}
Con_11_0_28 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [18, 21, 11], 7: [16, 19, 13], 8: [17, 21, 14], 9: [18, 20, 14], 10: [17, 19, 20]}
Con_11_0_29 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [21, 20, 11], 7: [16, 18, 13], 8: [17, 18, 14], 9: [19, 20, 14], 10: [17, 19, 21]}
Con_11_0_30 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [21, 20, 11], 7: [16, 18, 13], 8: [17, 18, 14], 9: [19, 21, 14], 10: [17, 19, 20]}
Con_11_0_31 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 20, 12], 6: [18, 21, 11], 7: [17, 19, 13], 8: [16, 21, 14], 9: [17, 18, 14], 10: [19, 21, 20]}
Con_11_0_32 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [18, 21, 11], 7: [17, 19, 13], 8: [16, 20, 14], 9: [17, 18, 14], 10: [19, 21, 20]}
Con_11_0_33 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [18, 20, 11], 7: [17, 21, 13], 8: [16, 19, 14], 9: [18, 21, 14], 10: [17, 19, 20]}
Con_11_0_34 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [18, 21, 11], 7: [17, 21, 13], 8: [16, 19, 14], 9: [18, 20, 14], 10: [17, 19, 20]}
Con_11_0_35 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [21, 20, 11], 7: [17, 18, 13], 8: [16, 18, 14], 9: [19, 20, 14], 10: [17, 19, 21]}
Con_11_0_36 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [21, 20, 11], 7: [17, 18, 13], 8: [16, 18, 14], 9: [19, 21, 14], 10: [17, 19, 20]}
Con_11_0_37 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 20, 12], 6: [21, 20, 11], 7: [17, 18, 13], 8: [16, 19, 14], 9: [18, 21, 14], 10: [17, 19, 21]}
Con_11_0_38 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [21, 20, 11], 7: [17, 18, 13], 8: [16, 19, 14], 9: [18, 20, 14], 10: [17, 19, 21]}
Con_11_0_39 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [21, 20, 11], 7: [17, 18, 13], 8: [16, 19, 14], 9: [18, 21, 14], 10: [17, 19, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 8], 17: [10, 2, 7], 18: [3, 7, 9], 19: [10, 3, 8], 20: [10, 4, 6], 21: [5, 6, 9]}
Con_11_0_40 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 20, 12], 6: [18, 20, 11], 7: [19, 21, 13], 8: [16, 21, 14], 9: [17, 19, 14], 10: [17, 18, 21], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 8], 17: [10, 2, 9], 18: [10, 3, 6], 19: [3, 7, 9], 20: [4, 5, 6], 21: [10, 7, 8]}
Con_11_0_41 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 20, 12], 6: [18, 21, 11], 7: [19, 21, 13], 8: [16, 21, 14], 9: [17, 19, 14], 10: [17, 18, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 8], 17: [10, 2, 9], 18: [10, 3, 6], 19: [3, 7, 9], 20: [10, 4, 5], 21: [6, 7, 8]}
Con_11_0_42 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 20, 12], 6: [21, 20, 11], 7: [18, 21, 13], 8: [16, 19, 14], 9: [17, 18, 14], 10: [17, 19, 21], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 8], 17: [10, 2, 9], 18: [3, 7, 9], 19: [10, 3, 8], 20: [4, 5, 6], 21: [10, 6, 7]}
Con_11_0_43 = {1: [11, 12, 13, 14],
               2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [21, 20, 11], 7: [18, 21, 13], 8: [16, 19, 14], 9: [17, 18, 14], 10: [17, 19, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 8], 17: [10, 2, 9], 18: [3, 7, 9], 19: [10, 3, 8], 20: [10, 4, 6], 21: [5, 6, 7]}


#Box 11,1 in the Chart, the "unreachable" 1D4 subset
#finds 5 configs

Con_11_1_U_1 = {1: [11, 12, 13],
                2: [11, 14, 15], 3: [16, 17, 11], 4: [18, 19, 11], 5: [19, 21, 20], 6: [17, 18, 20, 15], 7: [16, 20, 13, 14], 8: [18, 21, 12, 14], 9: [17, 21, 13], 10: [16, 19, 12, 15], 11: [1, 2, 3, 4], 12: [10, 1, 8], 13: [1, 7, 9], 14: [2, 7, 8], 15: [10, 2, 6], 16: [10, 3, 7], 17: [3, 6, 9], 18: [4, 6, 8], 19: [10, 4, 5], 20: [5, 6, 7], 21: [5, 8, 9]}
Con_11_1_U_2 = {1: [11, 12, 13],
                2: [11, 14, 15], 3: [16, 17, 11], 4: [18, 19, 11], 5: [19, 21, 20], 6: [17, 18, 20, 15], 7: [16, 20, 13, 14], 8: [18, 21, 13], 9: [17, 21, 12, 14], 10: [16, 19, 12, 15], 11: [1, 2, 3, 4], 12: [10, 1, 9], 13: [1, 7, 8], 14: [2, 7, 9], 15: [10, 2, 6], 16: [10, 3, 7], 17: [3, 6, 9], 18: [4, 6, 8], 19: [10, 4, 5], 20: [5, 6, 7], 21: [5, 8, 9]}
Con_11_1_U_3 = {1: [11, 12, 13],
                2: [11, 14, 15], 3: [16, 17, 11], 4: [18, 19, 11], 5: [17, 19, 20, 15], 6: [16, 18, 20, 13], 7: [20, 12, 14], 8: [16, 19, 21, 14], 9: [17, 18, 21, 12], 10: [21, 13, 15], 11: [1, 2, 3, 4], 12: [1, 7, 9], 13: [10, 1, 6], 14: [2, 7, 8], 15: [10, 2, 5], 16: [3, 6, 8], 17: [3, 5, 9], 18: [4, 6, 9], 19: [4, 5, 8], 20: [5, 6, 7], 21: [10, 8, 9]}
Con_11_1_U_4 = {1: [11, 12, 13],
                2: [11, 14, 15], 3: [16, 17, 11], 4: [18, 19, 11], 5: [17, 19, 20, 15], 6: [16, 18, 20, 13], 7: [20, 12, 14], 8: [19, 21, 13, 14], 9: [17, 18, 21, 12], 10: [16, 21, 15], 11: [1, 2, 3, 4], 12: [1, 7, 9], 13: [1, 6, 8], 14: [2, 7, 8], 15: [10, 2, 5], 16: [10, 3, 6], 17: [3, 5, 9], 18: [4, 6, 9], 19: [4, 5, 8], 20: [5, 6, 7], 21: [10, 8, 9]}
Con_11_1_U_5 = {1: [11, 12, 13],
                2: [11, 14, 15], 3: [16, 17, 11], 4: [18, 19, 11], 5: [17, 19, 20, 15], 6: [16, 18, 20, 13], 7: [20, 12, 14], 8: [19, 21, 13, 14], 9: [17, 18, 21], 10: [16, 21, 12, 15], 11: [1, 2, 3, 4], 12: [10, 1, 7], 13: [1, 6, 8], 14: [2, 7, 8], 15: [10, 2, 5], 16: [10, 3, 6], 17: [3, 5, 9], 18: [4, 6, 9], 19: [4, 5, 8], 20: [5, 6, 7], 21: [10, 8, 9]}





#Box 12,0 "unreachables": only one config, found+checked by hand
Con_12_0_U_1_Data = Graph({11:[1,3,4], 12:[1,5,6], 13:[1,7,8], 14:[1,9,10],
                 15:[2,3,5], 16:[2,6,7], 17:[2,8,9], 18:[2,4,10],
                 19:[3,6,9], 20:[4,6,8], 21:[3,7,10], 22:[5,8,10]})
Con_12_0_U_1_Part = (range(1,11),range(11,23))
Con_12_0_U_1_Graph = BipartiteGraph(Con_12_0_U_1_Data, Con_12_0_U_1_Part)
Con_12_0_U_1_Graph.name('Con-12-0: Unreachable #1 (EvilGrid)')

Con_12_0_U_List = [Con_12_0_U_1_Graph]





Con_11_0_1_Data = Graph(Con_11_0_1)
Con_11_0_1_Part = (range(1,11), range(11,22))
Con_11_0_1_Graph = BipartiteGraph(Con_11_0_1_Data, Con_11_0_1_Part)

Con_11_0_2_Data = Graph(Con_11_0_2)
Con_11_0_2_Part = (range(1,11), range(11,22))
Con_11_0_2_Graph = BipartiteGraph(Con_11_0_2_Data, Con_11_0_2_Part)

Con_11_0_3_Data = Graph(Con_11_0_3)
Con_11_0_3_Part = (range(1,11), range(11,22))
Con_11_0_3_Graph = BipartiteGraph(Con_11_0_3_Data, Con_11_0_3_Part)

Con_11_0_4_Data = Graph(Con_11_0_4)
Con_11_0_4_Part = (range(1,11), range(11,22))
Con_11_0_4_Graph = BipartiteGraph(Con_11_0_4_Data, Con_11_0_4_Part)

Con_11_0_5_Data = Graph(Con_11_0_5)
Con_11_0_5_Part = (range(1,11), range(11,22))
Con_11_0_5_Graph = BipartiteGraph(Con_11_0_5_Data, Con_11_0_5_Part)

Con_11_0_6_Data = Graph(Con_11_0_6)
Con_11_0_6_Part = (range(1,11), range(11,22))
Con_11_0_6_Graph = BipartiteGraph(Con_11_0_6_Data, Con_11_0_6_Part)

Con_11_0_7_Data = Graph(Con_11_0_7)
Con_11_0_7_Part = (range(1,11), range(11,22))
Con_11_0_7_Graph = BipartiteGraph(Con_11_0_7_Data, Con_11_0_7_Part)

Con_11_0_8_Data = Graph(Con_11_0_8)
Con_11_0_8_Part = (range(1,11), range(11,22))
Con_11_0_8_Graph = BipartiteGraph(Con_11_0_8_Data, Con_11_0_8_Part)

Con_11_0_9_Data = Graph(Con_11_0_9)
Con_11_0_9_Part = (range(1,11), range(11,22))
Con_11_0_9_Graph = BipartiteGraph(Con_11_0_9_Data, Con_11_0_9_Part)

Con_11_0_10_Data = Graph(Con_11_0_10)
Con_11_0_10_Part = (range(1,11), range(11,22))
Con_11_0_10_Graph = BipartiteGraph(Con_11_0_10_Data, Con_11_0_10_Part)

Con_11_0_11_Data = Graph(Con_11_0_11)
Con_11_0_11_Part = (range(1,11), range(11,22))
Con_11_0_11_Graph = BipartiteGraph(Con_11_0_11_Data, Con_11_0_11_Part)

Con_11_0_12_Data = Graph(Con_11_0_12)
Con_11_0_12_Part = (range(1,11), range(11,22))
Con_11_0_12_Graph = BipartiteGraph(Con_11_0_12_Data, Con_11_0_12_Part)

Con_11_0_13_Data = Graph(Con_11_0_13)
Con_11_0_13_Part = (range(1,11), range(11,22))
Con_11_0_13_Graph = BipartiteGraph(Con_11_0_13_Data, Con_11_0_13_Part)

Con_11_0_14_Data = Graph(Con_11_0_14)
Con_11_0_14_Part = (range(1,11), range(11,22))
Con_11_0_14_Graph = BipartiteGraph(Con_11_0_14_Data, Con_11_0_14_Part)

Con_11_0_15_Data = Graph(Con_11_0_15)
Con_11_0_15_Part = (range(1,11), range(11,22))
Con_11_0_15_Graph = BipartiteGraph(Con_11_0_15_Data, Con_11_0_15_Part)

Con_11_0_16_Data = Graph(Con_11_0_16)
Con_11_0_16_Part = (range(1,11), range(11,22))
Con_11_0_16_Graph = BipartiteGraph(Con_11_0_16_Data, Con_11_0_16_Part)

Con_11_0_17_Data = Graph(Con_11_0_17)
Con_11_0_17_Part = (range(1,11), range(11,22))
Con_11_0_17_Graph = BipartiteGraph(Con_11_0_17_Data, Con_11_0_17_Part)

Con_11_0_18_Data = Graph(Con_11_0_18)
Con_11_0_18_Part = (range(1,11), range(11,22))
Con_11_0_18_Graph = BipartiteGraph(Con_11_0_18_Data, Con_11_0_18_Part)

Con_11_0_19_Data = Graph(Con_11_0_19)
Con_11_0_19_Part = (range(1,11), range(11,22))
Con_11_0_19_Graph = BipartiteGraph(Con_11_0_19_Data, Con_11_0_19_Part)

Con_11_0_20_Data = Graph(Con_11_0_20)
Con_11_0_20_Part = (range(1,11), range(11,22))
Con_11_0_20_Graph = BipartiteGraph(Con_11_0_20_Data, Con_11_0_20_Part)

Con_11_0_21_Data = Graph(Con_11_0_21)
Con_11_0_21_Part = (range(1,11), range(11,22))
Con_11_0_21_Graph = BipartiteGraph(Con_11_0_21_Data, Con_11_0_21_Part)

Con_11_0_22_Data = Graph(Con_11_0_22)
Con_11_0_22_Part = (range(1,11), range(11,22))
Con_11_0_22_Graph = BipartiteGraph(Con_11_0_22_Data, Con_11_0_22_Part)

Con_11_0_23_Data = Graph(Con_11_0_23)
Con_11_0_23_Part = (range(1,11), range(11,22))
Con_11_0_23_Graph = BipartiteGraph(Con_11_0_23_Data, Con_11_0_23_Part)

Con_11_0_24_Data = Graph(Con_11_0_24)
Con_11_0_24_Part = (range(1,11), range(11,22))
Con_11_0_24_Graph = BipartiteGraph(Con_11_0_24_Data, Con_11_0_24_Part)

Con_11_0_25_Data = Graph(Con_11_0_25)
Con_11_0_25_Part = (range(1,11), range(11,22))
Con_11_0_25_Graph = BipartiteGraph(Con_11_0_25_Data, Con_11_0_25_Part)

Con_11_0_26_Data = Graph(Con_11_0_26)
Con_11_0_26_Part = (range(1,11), range(11,22))
Con_11_0_26_Graph = BipartiteGraph(Con_11_0_26_Data, Con_11_0_26_Part)

Con_11_0_27_Data = Graph(Con_11_0_27)
Con_11_0_27_Part = (range(1,11), range(11,22))
Con_11_0_27_Graph = BipartiteGraph(Con_11_0_27_Data, Con_11_0_27_Part)

Con_11_0_28_Data = Graph(Con_11_0_28)
Con_11_0_28_Part = (range(1,11), range(11,22))
Con_11_0_28_Graph = BipartiteGraph(Con_11_0_28_Data, Con_11_0_28_Part)

#Con_11_0_29_Data = Graph(Con_11_0_29)
#Con_11_0_29_Part = (range(1,11), range(11,22))
#Con_11_0_29_Graph = BipartiteGraph(Con_11_0_29_Data, Con_11_0_29_Part)

#Con_11_0_30_Data = Graph(Con_11_0_30)
#Con_11_0_30_Part = (range(1,11), range(11,22))
#Con_11_0_30_Graph = BipartiteGraph(Con_11_0_30_Data, Con_11_0_30_Part)

Con_11_0_31_Data = Graph(Con_11_0_31)
Con_11_0_31_Part = (range(1,11), range(11,22))
Con_11_0_31_Graph = BipartiteGraph(Con_11_0_31_Data, Con_11_0_31_Part)

Con_11_0_32_Data = Graph(Con_11_0_32)
Con_11_0_32_Part = (range(1,11), range(11,22))
Con_11_0_32_Graph = BipartiteGraph(Con_11_0_32_Data, Con_11_0_32_Part)

Con_11_0_33_Data = Graph(Con_11_0_33)
Con_11_0_33_Part = (range(1,11), range(11,22))
Con_11_0_33_Graph = BipartiteGraph(Con_11_0_33_Data, Con_11_0_33_Part)

Con_11_0_34_Data = Graph(Con_11_0_34)
Con_11_0_34_Part = (range(1,11), range(11,22))
Con_11_0_34_Graph = BipartiteGraph(Con_11_0_34_Data, Con_11_0_34_Part)

#Con_11_0_35_Data = Graph(Con_11_0_35)
#Con_11_0_35_Part = (range(1,11), range(11,22))
#Con_11_0_35_Graph = BipartiteGraph(Con_11_0_35_Data, Con_11_0_35_Part)

#Con_11_0_36_Data = Graph(Con_11_0_36)
#Con_11_0_36_Part = (range(1,11), range(11,22))
#Con_11_0_36_Graph = BipartiteGraph(Con_11_0_36_Data, Con_11_0_36_Part)

#Con_11_0_37_Data = Graph(Con_11_0_37)
#Con_11_0_37_Part = (range(1,11), range(11,22))
#Con_11_0_37_Graph = BipartiteGraph(Con_11_0_37_Data, Con_11_0_37_Part)

#Con_11_0_38_Data = Graph(Con_11_0_38)
#Con_11_0_38_Part = (range(1,11), range(11,22))
#Con_11_0_38_Graph = BipartiteGraph(Con_11_0_38_Data, Con_11_0_38_Part)

#Con_11_0_39_Data = Graph(Con_11_0_39)
#Con_11_0_39_Part = (range(1,11), range(11,22))
#Con_11_0_39_Graph = BipartiteGraph(Con_11_0_39_Data, Con_11_0_39_Part)

Con_11_0_40_Data = Graph(Con_11_0_40)
Con_11_0_40_Part = (range(1,11), range(11,22))
Con_11_0_40_Graph = BipartiteGraph(Con_11_0_40_Data, Con_11_0_40_Part)

Con_11_0_41_Data = Graph(Con_11_0_41)
Con_11_0_41_Part = (range(1,11), range(11,22))
Con_11_0_41_Graph = BipartiteGraph(Con_11_0_41_Data, Con_11_0_41_Part)

#Con_11_0_42_Data = Graph(Con_11_0_42)
#Con_11_0_42_Part = (range(1,11), range(11,22))
#Con_11_0_42_Graph = BipartiteGraph(Con_11_0_42_Data, Con_11_0_42_Part)

#Con_11_0_43_Data = Graph(Con_11_0_43)
#Con_11_0_43_Part = (range(1,11), range(11,22))
#Con_11_0_43_Graph = BipartiteGraph(Con_11_0_43_Data, Con_11_0_43_Part)

Con_11_0_1_Graph.name("Con-11-0 #1")
Con_11_0_2_Graph.name("Con-11-0 #2")
Con_11_0_3_Graph.name("Con-11-0 #3")
Con_11_0_4_Graph.name("Con-11-0 #4")
Con_11_0_5_Graph.name("Con-11-0 #5")
Con_11_0_6_Graph.name("Con-11-0 #6")
Con_11_0_7_Graph.name("Con-11-0 #7")
Con_11_0_8_Graph.name("Con-11-0 #8")
Con_11_0_9_Graph.name("Con-11-0 #9")
Con_11_0_10_Graph.name("Con-11-0 #10")
Con_11_0_11_Graph.name("Con-11-0 #11")
Con_11_0_12_Graph.name("Con-11-0 #12")
Con_11_0_13_Graph.name("Con-11-0 #13")
Con_11_0_14_Graph.name("Con-11-0 #14")
Con_11_0_15_Graph.name("Con-11-0 #15")
Con_11_0_16_Graph.name("Con-11-0 #16")
Con_11_0_17_Graph.name("Con-11-0 #17")
Con_11_0_18_Graph.name("Con-11-0 #18")
Con_11_0_19_Graph.name("Con-11-0 #19")
Con_11_0_20_Graph.name("Con-11-0 #20")
Con_11_0_21_Graph.name("Con-11-0 #21")
Con_11_0_22_Graph.name("Con-11-0 #22")
Con_11_0_23_Graph.name("Con-11-0 #23")
Con_11_0_24_Graph.name("Con-11-0 #24")
Con_11_0_25_Graph.name("Con-11-0 #25")
Con_11_0_26_Graph.name("Con-11-0 #26")
Con_11_0_27_Graph.name("Con-11-0 #27")
Con_11_0_28_Graph.name("Con-11-0 #28")
#Con_11_0_29_Graph.name("Con-11-0 #29")
#Con_11_0_30_Graph.name("Con-11-0 #30")
Con_11_0_31_Graph.name("Con-11-0 #31")
Con_11_0_32_Graph.name("Con-11-0 #32")
Con_11_0_33_Graph.name("Con-11-0 #33")
Con_11_0_34_Graph.name("Con-11-0 #34")
#Con_11_0_35_Graph.name("Con-11-0 #35")
#Con_11_0_36_Graph.name("Con-11-0 #36")
#Con_11_0_37_Graph.name("Con-11-0 #37")
#Con_11_0_38_Graph.name("Con-11-0 #38")
#Con_11_0_39_Graph.name("Con-11-0 #39")
Con_11_0_40_Graph.name("Con-11-0 #40")
Con_11_0_41_Graph.name("Con-11-0 #41")
#Con_11_0_42_Graph.name("Con-11-0 #42")
#Con_11_0_43_Graph.name("Con-11-0 #43")

Con_11_0_List = [Con_11_0_1_Graph, Con_11_0_2_Graph,
 Con_11_0_3_Graph, Con_11_0_4_Graph, Con_11_0_5_Graph, Con_11_0_6_Graph, Con_11_0_7_Graph, Con_11_0_8_Graph, Con_11_0_9_Graph, Con_11_0_10_Graph, Con_11_0_11_Graph, Con_11_0_12_Graph, Con_11_0_13_Graph, Con_11_0_14_Graph, Con_11_0_15_Graph, Con_11_0_16_Graph, Con_11_0_17_Graph, Con_11_0_18_Graph, Con_11_0_19_Graph, Con_11_0_20_Graph, Con_11_0_21_Graph, Con_11_0_22_Graph, Con_11_0_23_Graph, Con_11_0_24_Graph, Con_11_0_25_Graph, Con_11_0_26_Graph, Con_11_0_27_Graph, Con_11_0_28_Graph, Con_11_0_31_Graph, Con_11_0_32_Graph, Con_11_0_33_Graph, Con_11_0_34_Graph, Con_11_0_40_Graph, Con_11_0_41_Graph]


Con_11_1_U_1_Graph = BipartiteGraph(Graph(Con_11_1_U_1),(range(1,11),range(11,22)))
Con_11_1_U_2_Graph = BipartiteGraph(Graph(Con_11_1_U_2),(range(1,11),range(11,22)))
Con_11_1_U_3_Graph = BipartiteGraph(Graph(Con_11_1_U_3),(range(1,11),range(11,22)))
Con_11_1_U_4_Graph = BipartiteGraph(Graph(Con_11_1_U_4),(range(1,11),range(11,22)))
Con_11_1_U_5_Graph = BipartiteGraph(Graph(Con_11_1_U_5),(range(1,11),range(11,22)))

Con_11_1_U_1_Graph.name('Con-11-1 Unreachable #1')
Con_11_1_U_2_Graph.name('Con-11-1 Unreachable #2')
Con_11_1_U_3_Graph.name('Con-11-1 Unreachable #3')
Con_11_1_U_4_Graph.name('Con-11-1 Unreachable #4')
Con_11_1_U_5_Graph.name('Con-11-1 Unreachable #5')


Con_11_1_U_List = [Con_11_1_U_1_Graph, Con_11_1_U_2_Graph,Con_11_1_U_3_Graph,Con_11_1_U_4_Graph,Con_11_1_U_5_Graph]


Con_12_0_R_1 = {1: [11, 12, 13, 14],
                2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 19, 12], 6: [16, 20, 13], 7: [17, 21, 22, 13], 8: [19, 22, 14, 15], 9: [21, 20, 14], 10: [18, 21, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 8], 20: [3, 6, 9], 21: [10, 7, 9], 22: [4, 7, 8]}
Con_12_0_R_2 = {1: [11, 12, 13, 14],
                2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 19, 12], 6: [16, 21, 13], 7: [17, 22, 20, 13], 8: [19, 22, 14, 15], 9: [21, 20, 14], 10: [18, 21, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 8], 20: [3, 7, 9], 21: [10, 6, 9], 22: [4, 7, 8]}
Con_12_0_R_3 = {1: [11, 12, 13, 14],
                2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 19, 12], 6: [16, 20, 13], 7: [17, 21, 22, 13], 8: [22, 20, 14, 15], 9: [19, 21, 14], 10: [18, 21, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 9], 20: [3, 6, 8], 21: [10, 7, 9], 22: [4, 7, 8]}
Con_12_0_R_4 = {1: [11, 12, 13, 14],
                2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 21, 12], 6: [16, 19, 13], 7: [17, 22, 20, 13], 8: [19, 22, 14, 15], 9: [21, 20, 14], 10: [18, 21, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 6, 8], 20: [3, 7, 9], 21: [10, 5, 9], 22: [4, 7, 8]}
Con_12_0_R_5 = {1: [11, 12, 13, 14],
                2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 19, 12], 5: [17, 18, 22, 12], 6: [16, 20, 13], 7: [19, 21, 22, 13], 8: [22, 20, 14, 15], 9: [17, 21, 14], 10: [18, 21, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 9], 18: [10, 3, 5], 19: [3, 4, 7], 20: [3, 6, 8], 21: [10, 7, 9], 22: [5, 7, 8]}
Con_12_0_R_6 = {1: [11, 12, 13, 14],
                2: [16, 17, 18, 15], 3: [19, 20, 11, 15], 4: [21, 22, 12, 15], 5: [17, 21, 11], 6: [18, 19, 12], 7: [17, 19, 22, 13], 8: [16, 20, 13], 9: [18, 22, 20, 14], 10: [16, 21, 14], 11: [1, 3, 5], 12: [1, 4, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [10, 2, 8], 17: [2, 5, 7], 18: [2, 6, 9], 19: [3, 6, 7], 20: [3, 8, 9], 21: [10, 4, 5], 22: [4, 7, 9]}
Con_12_0_R_7 = {1: [11, 12, 13, 14],
                2: [16, 17, 18, 15], 3: [19, 20, 11, 15], 4: [21, 22, 12, 15], 5: [17, 21, 11], 6: [18, 19, 12], 7: [17, 20, 13], 8: [16, 19, 22, 13], 9: [18, 22, 20, 14], 10: [16, 21, 14], 11: [1, 3, 5], 12: [1, 4, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [10, 2, 8], 17: [2, 5, 7], 18: [2, 6, 9], 19: [3, 6, 8], 20: [3, 7, 9], 21: [10, 4, 5], 22: [4, 8, 9]}
Con_12_0_R_8 = {1: [11, 12, 13, 14],
                2: [16, 17, 18, 15], 3: [19, 20, 11, 15], 4: [21, 12, 15], 5: [17, 21, 11], 6: [18, 19, 22, 12], 7: [17, 22, 20, 13], 8: [16, 19, 13], 9: [18, 20, 14], 10: [16, 21, 22, 14], 11: [1, 3, 5], 12: [1, 4, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [10, 2, 8], 17: [2, 5, 7], 18: [2, 6, 9], 19: [3, 6, 8], 20: [3, 7, 9], 21: [10, 4, 5], 22: [10, 6, 7]}
Con_12_0_R_9 = {1: [11, 12, 13, 14],
                2: [16, 17, 18, 15], 3: [19, 20, 11, 15], 4: [21, 12, 15], 5: [17, 21, 22, 11], 6: [18, 19, 22, 12], 7: [17, 20, 13], 8: [16, 19, 13], 9: [18, 21, 14], 10: [16, 22, 20, 14], 11: [1, 3, 5], 12: [1, 4, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [10, 2, 8], 17: [2, 5, 7], 18: [2, 6, 9], 19: [3, 6, 8], 20: [10, 3, 7], 21: [4, 5, 9], 22: [10, 5, 6]}
Con_12_0_R_10 = {1: [11, 12, 13, 14],
                 2: [16, 17, 12, 15], 3: [18, 19, 11, 15], 4: [21, 20, 15], 5: [17, 22, 20, 11], 6: [18, 21, 22, 12], 7: [16, 21, 13], 8: [17, 19, 13], 9: [16, 19, 22, 14], 10: [18, 20, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [10, 3, 6], 19: [3, 8, 9], 20: [10, 4, 5], 21: [4, 6, 7], 22: [5, 6, 9]}
Con_12_0_R_11 = {1: [11, 12, 13, 14],
                 2: [16, 17, 12, 15], 3: [18, 19, 11, 15], 4: [21, 22, 20, 15], 5: [17, 20, 11], 6: [18, 21, 12], 7: [16, 21, 13], 8: [17, 19, 22, 13], 9: [16, 18, 22, 14], 10: [19, 20, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 9], 19: [10, 3, 8], 20: [10, 4, 5], 21: [4, 6, 7], 22: [4, 8, 9]}
Con_12_0_R_12 = {1: [11, 12, 13, 14],
                 2: [16, 17, 12, 15], 3: [18, 19, 11, 15], 4: [21, 20, 15], 5: [17, 22, 20, 11], 6: [18, 21, 22, 12], 7: [16, 19, 22, 13], 8: [17, 18, 13], 9: [16, 21, 14], 10: [19, 20, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 8], 19: [10, 3, 7], 20: [10, 4, 5], 21: [4, 6, 9], 22: [5, 6, 7]}
Con_12_0_R_13 = {1: [11, 12, 13, 14],
                 2: [16, 17, 12, 15], 3: [18, 19, 11, 15], 4: [21, 20, 15], 5: [17, 22, 20, 11], 6: [18, 21, 22, 12], 7: [16, 19, 22, 13], 8: [17, 18, 13], 9: [16, 20, 14], 10: [19, 21, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 8], 19: [10, 3, 7], 20: [4, 5, 9], 21: [10, 4, 6], 22: [5, 6, 7]}
Con_12_0_R_14 = {1: [11, 12, 13, 14],
                 2: [16, 17, 12, 15], 3: [18, 19, 11, 15], 4: [21, 22, 20, 15], 5: [17, 20, 11], 6: [18, 20, 12], 7: [16, 21, 13], 8: [17, 19, 22, 13], 9: [16, 18, 22, 14], 10: [19, 21, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 9], 19: [10, 3, 8], 20: [4, 5, 6], 21: [10, 4, 7], 22: [4, 8, 9]}
Con_12_0_R_15 = {1: [11, 12, 13, 14],
                 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [22, 20, 13, 15], 5: [16, 21, 22, 12], 6: [18, 20, 11], 7: [16, 19, 13], 8: [17, 18, 22, 14], 9: [19, 21, 14], 10: [17, 21, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 7], 17: [10, 2, 8], 18: [3, 6, 8], 19: [3, 7, 9], 20: [10, 4, 6], 21: [10, 5, 9], 22: [4, 5, 8]}
Con_12_0_R_16 = {1: [11, 12, 13, 14],
                 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [22, 20, 13, 15], 5: [16, 21, 22, 12], 6: [18, 20, 11], 7: [16, 19, 13], 8: [17, 19, 22, 14], 9: [18, 21, 14], 10: [17, 21, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 7], 17: [10, 2, 8], 18: [3, 6, 9], 19: [3, 7, 8], 20: [10, 4, 6], 21: [10, 5, 9], 22: [4, 5, 8]}
Con_12_0_R_17 = {1: [11, 12, 13, 14],
                 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [22, 20, 13, 15], 5: [16, 21, 12], 6: [18, 21, 22, 11], 7: [16, 19, 13], 8: [17, 19, 22, 14], 9: [18, 20, 14], 10: [17, 21, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 7], 17: [10, 2, 8], 18: [3, 6, 9], 19: [3, 7, 8], 20: [10, 4, 9], 21: [10, 5, 6], 22: [4, 6, 8]}
Con_12_0_R_18 = {1: [11, 12, 13, 14],
                 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [22, 20, 13, 15], 5: [16, 21, 22, 12], 6: [18, 21, 11], 7: [17, 19, 13], 8: [16, 20, 14], 9: [17, 18, 22, 14], 10: [19, 21, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 8], 17: [2, 7, 9], 18: [3, 6, 9], 19: [10, 3, 7], 20: [10, 4, 8], 21: [10, 5, 6], 22: [4, 5, 9]}

Con_12_0_R_1_Graph = BipartiteGraph(Graph(Con_12_0_R_1),(range(1,11),range(11,23)))
Con_12_0_R_2_Graph = BipartiteGraph(Graph(Con_12_0_R_2),(range(1,11),range(11,23)))
Con_12_0_R_3_Graph = BipartiteGraph(Graph(Con_12_0_R_3),(range(1,11),range(11,23)))
Con_12_0_R_4_Graph = BipartiteGraph(Graph(Con_12_0_R_4),(range(1,11),range(11,23)))
Con_12_0_R_5_Graph = BipartiteGraph(Graph(Con_12_0_R_5),(range(1,11),range(11,23)))
Con_12_0_R_6_Graph = BipartiteGraph(Graph(Con_12_0_R_6),(range(1,11),range(11,23)))
Con_12_0_R_7_Graph = BipartiteGraph(Graph(Con_12_0_R_7),(range(1,11),range(11,23)))
Con_12_0_R_8_Graph = BipartiteGraph(Graph(Con_12_0_R_8),(range(1,11),range(11,23)))
Con_12_0_R_9_Graph = BipartiteGraph(Graph(Con_12_0_R_9),(range(1,11),range(11,23)))
Con_12_0_R_10_Graph = BipartiteGraph(Graph(Con_12_0_R_10),(range(1,11),range(11,23)))
Con_12_0_R_11_Graph = BipartiteGraph(Graph(Con_12_0_R_11),(range(1,11),range(11,23)))
Con_12_0_R_12_Graph = BipartiteGraph(Graph(Con_12_0_R_12),(range(1,11),range(11,23)))
Con_12_0_R_13_Graph = BipartiteGraph(Graph(Con_12_0_R_13),(range(1,11),range(11,23)))
Con_12_0_R_14_Graph = BipartiteGraph(Graph(Con_12_0_R_14),(range(1,11),range(11,23)))
Con_12_0_R_15_Graph = BipartiteGraph(Graph(Con_12_0_R_15),(range(1,11),range(11,23)))
Con_12_0_R_16_Graph = BipartiteGraph(Graph(Con_12_0_R_16),(range(1,11),range(11,23)))
Con_12_0_R_17_Graph = BipartiteGraph(Graph(Con_12_0_R_17),(range(1,11),range(11,23)))
Con_12_0_R_18_Graph = BipartiteGraph(Graph(Con_12_0_R_18),(range(1,11),range(11,23)))


Con_12_0_R_1_Graph.name("Con-12-0 Reachable #1")
Con_12_0_R_2_Graph.name("Con-12-0 Reachable #2")
Con_12_0_R_3_Graph.name("Con-12-0 Reachable #3")
Con_12_0_R_4_Graph.name("Con-12-0 Reachable #4")
Con_12_0_R_5_Graph.name("Con-12-0 Reachable #5")
Con_12_0_R_6_Graph.name("Con-12-0 Reachable #6")
Con_12_0_R_7_Graph.name("Con-12-0 Reachable #7")
Con_12_0_R_8_Graph.name("Con-12-0 Reachable #8")
Con_12_0_R_9_Graph.name("Con-12-0 Reachable #9")
Con_12_0_R_10_Graph.name("Con-12-0 Reachable #10")
Con_12_0_R_11_Graph.name("Con-12-0 Reachable #11")
Con_12_0_R_12_Graph.name("Con-12-0 Reachable #12")
Con_12_0_R_13_Graph.name("Con-12-0 Reachable #13")
Con_12_0_R_14_Graph.name("Con-12-0 Reachable #14")
Con_12_0_R_15_Graph.name("Con-12-0 Reachable #15")
Con_12_0_R_16_Graph.name("Con-12-0 Reachable #16")
Con_12_0_R_17_Graph.name("Con-12-0 Reachable #17")
Con_12_0_R_18_Graph.name("Con-12-0 Reachable #18")


Con_12_0_R_List = [Con_12_0_R_1_Graph, Con_12_0_R_2_Graph, Con_12_0_R_3_Graph, Con_12_0_R_4_Graph, Con_12_0_R_5_Graph, Con_12_0_R_6_Graph, Con_12_0_R_7_Graph, Con_12_0_R_8_Graph, Con_12_0_R_9_Graph, Con_12_0_R_10_Graph, Con_12_0_R_11_Graph, Con_12_0_R_12_Graph, Con_12_0_R_13_Graph, Con_12_0_R_14_Graph, Con_12_0_R_15_Graph, Con_12_0_R_16_Graph, Con_12_0_R_17_Graph, Con_12_0_R_18_Graph]

Con_12_0_List= Con_12_0_R_List + Con_12_0_U_List


Con_13_0_1 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 19, 23, 12], 6: [16, 23, 20, 13], 7: [17, 21, 22, 13], 8: [19, 22, 14, 15], 9: [21, 20, 14], 10: [18, 21, 23, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 8], 20: [3, 6, 9], 21: [10, 7, 9], 22: [4, 7, 8], 23: [10, 5, 6]}
Con_13_0_2 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 19, 23, 12], 6: [16, 23, 20, 13], 7: [17, 21, 22, 13], 8: [22, 20, 14, 15], 9: [19, 21, 14], 10: [18, 21, 23, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 9], 20: [3, 6, 8], 21: [10, 7, 9], 22: [4, 7, 8], 23: [10, 5, 6]}




Con_13_0_1_Graph = BipartiteGraph(Graph(Con_13_0_1),(range(1,11),range(11,24)))
Con_13_0_2_Graph = BipartiteGraph(Graph(Con_13_0_2),(range(1,11),range(11,24)))

Con_13_0_1_Graph.name("Con-13-0 #1")
Con_13_0_2_Graph.name("Con-13-0 #2")

Con_13_0_List = [Con_13_0_1_Graph, Con_13_0_2_Graph]


Con_11_1_R_1 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 12], 5: [17, 19, 12], 6: [16, 19, 21, 13], 7: [17, 20, 13], 8: [19, 14, 15], 9: [21, 20, 14], 10: [18, 21, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 6, 8], 20: [3, 7, 9], 21: [10, 6, 9]}
Con_11_1_R_2 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 12], 5: [17, 19, 21, 12], 6: [16, 21, 13], 7: [17, 20, 13], 8: [19, 14, 15], 9: [21, 20, 14], 10: [18, 21, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 8], 20: [3, 7, 9], 21: [10, 5, 6, 9]}
Con_11_1_R_3 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 12], 5: [17, 19, 12], 6: [16, 20, 13], 7: [17, 21, 13], 8: [20, 14, 15], 9: [16, 19, 21, 14], 10: [18, 21, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6, 9], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 9], 20: [3, 6, 8], 21: [10, 7, 9]}
Con_11_1_R_4 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 12], 5: [17, 21, 12], 6: [16, 19, 13], 7: [17, 20, 13], 8: [19, 14, 15], 9: [21, 20, 14], 10: [18, 21, 13, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [10, 1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 6, 8], 20: [3, 7, 9], 21: [10, 5, 9]}
Con_11_1_R_5 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 12], 5: [17, 21, 12], 6: [16, 19, 21, 13], 7: [17, 20, 13], 8: [19, 14, 15], 9: [21, 20, 14], 10: [18, 21, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 6, 8], 20: [3, 7, 9], 21: [10, 5, 6, 9]}
Con_11_1_R_6 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 19, 12], 5: [17, 20, 12], 6: [16, 18, 13], 7: [19, 21, 13], 8: [20, 14, 15], 9: [17, 21, 14], 10: [18, 21, 12, 15], 11: [1, 2, 3], 12: [10, 1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 9], 18: [10, 3, 6], 19: [3, 4, 7], 20: [3, 5, 8], 21: [10, 7, 9]}
Con_11_1_R_7 = {1: [11, 12, 13, 14],
 2: [16, 17, 18, 15], 3: [19, 20, 11, 15], 4: [21, 12, 15], 5: [17, 21, 11], 6: [17, 19, 12], 7: [18, 19, 13], 8: [16, 20, 13], 9: [18, 20, 14], 10: [16, 19, 21, 14], 11: [1, 3, 5], 12: [1, 4, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [10, 2, 8], 17: [2, 5, 6], 18: [2, 7, 9], 19: [10, 3, 6, 7], 20: [3, 8, 9], 21: [10, 4, 5]}
Con_11_1_R_8 = {1: [11, 12, 13, 14],
 2: [16, 17, 18, 15], 3: [19, 20, 11, 15], 4: [21, 12, 15], 5: [17, 21, 11], 6: [17, 19, 12], 7: [18, 19, 21, 13], 8: [16, 20, 13], 9: [18, 20, 14], 10: [16, 21, 14], 11: [1, 3, 5], 12: [1, 4, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [10, 2, 8], 17: [2, 5, 6], 18: [2, 7, 9], 19: [3, 6, 7], 20: [3, 8, 9], 21: [10, 4, 5, 7]}
Con_11_1_R_9 = {1: [11, 12, 13, 14],
 2: [16, 17, 18, 15], 3: [19, 20, 11, 15], 4: [21, 12, 15], 5: [17, 21, 11], 6: [18, 19, 12], 7: [17, 19, 13], 8: [16, 20, 13], 9: [18, 20, 14], 10: [16, 19, 21, 14], 11: [1, 3, 5], 12: [1, 4, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [10, 2, 8], 17: [2, 5, 7], 18: [2, 6, 9], 19: [10, 3, 6, 7], 20: [3, 8, 9], 21: [10, 4, 5]}
Con_11_1_R_10 = {1: [11, 12, 13, 14],
 2: [16, 17, 18, 15], 3: [19, 20, 11, 15], 4: [21, 12, 15], 5: [17, 21, 11], 6: [18, 19, 12], 7: [17, 20, 13], 8: [16, 19, 21, 13], 9: [18, 21, 14], 10: [16, 20, 14], 11: [1, 3, 5], 12: [1, 4, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [10, 2, 8], 17: [2, 5, 7], 18: [2, 6, 9], 19: [3, 6, 8], 20: [10, 3, 7], 21: [4, 5, 8, 9]}
Con_11_1_R_11 = {1: [11, 12, 13, 14],
 2: [16, 17, 12, 15], 3: [18, 19, 11, 15], 4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 21, 12], 7: [16, 18, 20, 13], 8: [17, 19, 13], 9: [16, 21, 14], 10: [19, 20, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 7], 19: [10, 3, 8], 20: [10, 4, 5, 7], 21: [4, 6, 9]}
Con_11_1_R_12 = {1: [11, 12, 13, 14],
 2: [16, 17, 12, 15], 3: [18, 19, 11, 15], 4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 21, 12], 7: [16, 19, 13], 8: [17, 18, 13], 9: [16, 20, 14], 10: [17, 19, 21, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [10, 2, 5, 8], 18: [3, 6, 8], 19: [10, 3, 7], 20: [4, 5, 9], 21: [10, 4, 6]}
Con_11_1_R_13 = {1: [11, 12, 13, 14],
 2: [16, 17, 12, 15], 3: [18, 19, 11, 15], 4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 20, 12], 7: [16, 21, 13], 8: [17, 19, 13], 9: [16, 19, 14], 10: [17, 18, 21, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [10, 2, 5, 8], 18: [10, 3, 6], 19: [3, 8, 9], 20: [4, 5, 6], 21: [10, 4, 7]}
Con_11_1_R_14 = {1: [11, 12, 13, 14],
 2: [16, 17, 12, 15], 3: [18, 19, 11, 15], 4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 20, 12], 7: [16, 21, 13], 8: [17, 19, 13], 9: [16, 19, 20, 14], 10: [18, 21, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [10, 3, 6], 19: [3, 8, 9], 20: [4, 5, 6, 9], 21: [10, 4, 7]}
Con_11_1_R_15 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 20, 12], 6: [18, 21, 20, 11], 7: [16, 21, 13], 8: [17, 18, 14], 9: [19, 20, 14], 10: [17, 19, 21], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 7], 17: [10, 2, 8], 18: [3, 6, 8], 19: [10, 3, 9], 20: [4, 5, 6, 9], 21: [10, 6, 7]}
Con_11_1_R_16 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 12], 6: [18, 21, 11], 7: [16, 19, 13], 8: [17, 19, 14], 9: [16, 18, 20, 14], 10: [17, 21, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 7, 9], 17: [10, 2, 8], 18: [3, 6, 9], 19: [3, 7, 8], 20: [10, 4, 9], 21: [10, 5, 6]}
Con_11_1_R_17 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 20, 12], 6: [18, 20, 11], 7: [16, 19, 13], 8: [17, 20, 14], 9: [18, 21, 14], 10: [17, 19, 21], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 7], 17: [10, 2, 8], 18: [3, 6, 9], 19: [10, 3, 7], 20: [4, 5, 6, 8], 21: [10, 5, 9]}
Con_11_1_R_18 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [21, 20, 13, 15], 5: [16, 21, 12], 6: [18, 20, 11], 7: [16, 19, 13], 8: [17, 20, 14], 9: [18, 21, 14], 10: [17, 19, 21], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 7], 17: [10, 2, 8], 18: [3, 6, 9], 19: [10, 3, 7], 20: [4, 6, 8], 21: [10, 4, 5, 9]}
Con_11_1_R_19 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 20, 12], 6: [18, 21, 11], 7: [16, 19, 13], 8: [17, 21, 14], 9: [18, 20, 14], 10: [17, 19, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 7], 17: [10, 2, 8], 18: [3, 6, 9], 19: [10, 3, 7], 20: [10, 4, 5, 9], 21: [5, 6, 8]}
Con_11_1_R_20 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [21, 20, 13, 15], 5: [16, 21, 12], 6: [18, 21, 11], 7: [16, 19, 13], 8: [17, 21, 14], 9: [18, 20, 14], 10: [17, 19, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 7], 17: [10, 2, 8], 18: [3, 6, 9], 19: [10, 3, 7], 20: [10, 4, 9], 21: [4, 5, 6, 8]}
Con_11_1_R_21 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 20, 12], 6: [18, 21, 11], 7: [17, 19, 13], 8: [16, 21, 14], 9: [17, 18, 20, 14], 10: [19, 21, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 8], 17: [2, 7, 9], 18: [3, 6, 9], 19: [10, 3, 7], 20: [10, 4, 5, 9], 21: [10, 6, 8]}
Con_11_1_R_22 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 20, 12], 6: [18, 20, 11], 7: [17, 21, 13], 8: [16, 19, 14], 9: [18, 21, 14], 10: [17, 19, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 8], 17: [10, 2, 7], 18: [3, 6, 9], 19: [10, 3, 8], 20: [10, 4, 5, 6], 21: [5, 7, 9]}
Con_11_1_R_23 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 21, 20, 12], 6: [18, 21, 11], 7: [17, 21, 13], 8: [16, 19, 14], 9: [18, 20, 14], 10: [17, 19, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 8], 17: [10, 2, 7], 18: [3, 6, 9], 19: [10, 3, 8], 20: [10, 4, 5, 9], 21: [5, 6, 7]}
Con_11_1_R_24 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [20, 13, 15], 5: [16, 20, 12], 6: [18, 20, 11], 7: [19, 21, 13], 8: [16, 21, 14], 9: [17, 19, 20, 14], 10: [17, 18, 21], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 8], 17: [10, 2, 9], 18: [10, 3, 6], 19: [3, 7, 9], 20: [4, 5, 6, 9], 21: [10, 7, 8]}

Con_11_1_R_1_Graph = BipartiteGraph(Graph(Con_11_1_R_1), (range(1,11), range(11,22)))
Con_11_1_R_2_Graph = BipartiteGraph(Graph(Con_11_1_R_2), (range(1,11), range(11,22)))
Con_11_1_R_3_Graph = BipartiteGraph(Graph(Con_11_1_R_3), (range(1,11), range(11,22)))
Con_11_1_R_4_Graph = BipartiteGraph(Graph(Con_11_1_R_4), (range(1,11), range(11,22)))
Con_11_1_R_5_Graph = BipartiteGraph(Graph(Con_11_1_R_5), (range(1,11), range(11,22)))
Con_11_1_R_6_Graph = BipartiteGraph(Graph(Con_11_1_R_6), (range(1,11), range(11,22)))
Con_11_1_R_7_Graph = BipartiteGraph(Graph(Con_11_1_R_7), (range(1,11), range(11,22)))
Con_11_1_R_8_Graph = BipartiteGraph(Graph(Con_11_1_R_8), (range(1,11), range(11,22)))
Con_11_1_R_9_Graph = BipartiteGraph(Graph(Con_11_1_R_9), (range(1,11), range(11,22)))
Con_11_1_R_10_Graph = BipartiteGraph(Graph(Con_11_1_R_10), (range(1,11), range(11,22)))
Con_11_1_R_11_Graph = BipartiteGraph(Graph(Con_11_1_R_11), (range(1,11), range(11,22)))
Con_11_1_R_12_Graph = BipartiteGraph(Graph(Con_11_1_R_12), (range(1,11), range(11,22)))
Con_11_1_R_13_Graph = BipartiteGraph(Graph(Con_11_1_R_13), (range(1,11), range(11,22)))
Con_11_1_R_14_Graph = BipartiteGraph(Graph(Con_11_1_R_14), (range(1,11), range(11,22)))
Con_11_1_R_15_Graph = BipartiteGraph(Graph(Con_11_1_R_15), (range(1,11), range(11,22)))
Con_11_1_R_16_Graph = BipartiteGraph(Graph(Con_11_1_R_16), (range(1,11), range(11,22)))
Con_11_1_R_17_Graph = BipartiteGraph(Graph(Con_11_1_R_17), (range(1,11), range(11,22)))
Con_11_1_R_18_Graph = BipartiteGraph(Graph(Con_11_1_R_18), (range(1,11), range(11,22)))
Con_11_1_R_19_Graph = BipartiteGraph(Graph(Con_11_1_R_19), (range(1,11), range(11,22)))
Con_11_1_R_20_Graph = BipartiteGraph(Graph(Con_11_1_R_20), (range(1,11), range(11,22)))
Con_11_1_R_21_Graph = BipartiteGraph(Graph(Con_11_1_R_21), (range(1,11), range(11,22)))
Con_11_1_R_22_Graph = BipartiteGraph(Graph(Con_11_1_R_22), (range(1,11), range(11,22)))
Con_11_1_R_23_Graph = BipartiteGraph(Graph(Con_11_1_R_23), (range(1,11), range(11,22)))
Con_11_1_R_24_Graph = BipartiteGraph(Graph(Con_11_1_R_24), (range(1,11), range(11,22)))

Con_11_1_R_1_Graph.name("Con-11-1 R. #1")
Con_11_1_R_2_Graph.name("Con-11-1 R. #2")
Con_11_1_R_3_Graph.name("Con-11-1 R. #3")
Con_11_1_R_4_Graph.name("Con-11-1 R. #4")
Con_11_1_R_5_Graph.name("Con-11-1 R. #5")
Con_11_1_R_6_Graph.name("Con-11-1 R. #6")
Con_11_1_R_7_Graph.name("Con-11-1 R. #7")
Con_11_1_R_8_Graph.name("Con-11-1 R. #8")
Con_11_1_R_9_Graph.name("Con-11-1 R. #9")
Con_11_1_R_10_Graph.name("Con-11-1 R. #10")
Con_11_1_R_11_Graph.name("Con-11-1 R. #11")
Con_11_1_R_12_Graph.name("Con-11-1 R. #12")
Con_11_1_R_13_Graph.name("Con-11-1 R. #13")
Con_11_1_R_14_Graph.name("Con-11-1 R. #14")
Con_11_1_R_15_Graph.name("Con-11-1 R. #15")
Con_11_1_R_16_Graph.name("Con-11-1 R. #16")
Con_11_1_R_17_Graph.name("Con-11-1 R. #17")
Con_11_1_R_18_Graph.name("Con-11-1 R. #18")
Con_11_1_R_19_Graph.name("Con-11-1 R. #19")
Con_11_1_R_20_Graph.name("Con-11-1 R. #20")
Con_11_1_R_21_Graph.name("Con-11-1 R. #21")
Con_11_1_R_22_Graph.name("Con-11-1 R. #22")
Con_11_1_R_23_Graph.name("Con-11-1 R. #23")
Con_11_1_R_24_Graph.name("Con-11-1 R. #24")

Con_11_1_R_List = [Con_11_1_R_1_Graph, Con_11_1_R_2_Graph, Con_11_1_R_3_Graph, Con_11_1_R_4_Graph, Con_11_1_R_5_Graph, Con_11_1_R_6_Graph, Con_11_1_R_7_Graph, Con_11_1_R_8_Graph, Con_11_1_R_9_Graph, Con_11_1_R_10_Graph, Con_11_1_R_11_Graph, Con_11_1_R_12_Graph, Con_11_1_R_13_Graph, Con_11_1_R_14_Graph, Con_11_1_R_15_Graph, Con_11_1_R_16_Graph, Con_11_1_R_17_Graph, Con_11_1_R_18_Graph, Con_11_1_R_19_Graph, Con_11_1_R_20_Graph, Con_11_1_R_21_Graph, Con_11_1_R_22_Graph, Con_11_1_R_23_Graph, Con_11_1_R_24_Graph]
Con_11_1_List = Con_11_1_U_List + Con_11_1_R_List


Con_11_2_1 = {1: [11, 12, 13, 14], 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 12], 5: [17, 21, 12], 6: [16, 19, 13], 7: [17, 20, 13], 8: [19, 14, 15], 9: [16, 21, 20, 14], 10: [18, 21, 13, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [10, 1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6, 9], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 6, 8], 20: [3, 7, 9], 21: [10, 5, 9]}
Con_11_2_2 = {1: [11, 12, 13, 14], 2: [16, 17, 12, 15], 3: [18, 19, 11, 15], 4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 21, 12], 7: [16, 18, 20, 13], 8: [17, 19, 21, 13], 9: [16, 21, 14], 10: [19, 20, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [2, 5, 8], 18: [3, 6, 7], 19: [10, 3, 8], 20: [10, 4, 5, 7], 21: [4, 6, 8, 9]}
Con_11_2_3 = {1: [11, 12, 13, 14], 2: [16, 17, 12, 15], 3: [18, 19, 11, 15], 4: [21, 20, 15], 5: [17, 20, 11], 6: [18, 20, 12], 7: [16, 21, 13], 8: [17, 19, 13], 9: [16, 19, 20, 14], 10: [17, 18, 21, 14], 11: [1, 3, 5], 12: [1, 2, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [2, 7, 9], 17: [10, 2, 5, 8], 18: [10, 3, 6], 19: [3, 8, 9], 20: [4, 5, 6, 9], 21: [10, 4, 7]}

Con_11_2_1_Graph = BipartiteGraph(Graph(Con_11_2_1), (range(1,11), range(11,22)))
Con_11_2_2_Graph = BipartiteGraph(Graph(Con_11_2_2), (range(1,11), range(11,22)))
Con_11_2_3_Graph = BipartiteGraph(Graph(Con_11_2_3), (range(1,11), range(11,22)))

Con_11_2_1_Graph.name("Con-11-2 #1")
Con_11_2_2_Graph.name("Con-11-2 #2")
Con_11_2_3_Graph.name("Con-11-2 #3")

Con_11_2_List = [Con_11_2_1_Graph, Con_11_2_2_Graph, Con_11_2_3_Graph]


Con_12_1_1 = {1: [11, 12, 13],
 2: [11, 14, 15], 3: [16, 17, 22, 11], 4: [18, 19, 11], 5: [17, 19, 20, 15], 6: [16, 18, 20, 13], 7: [22, 20, 12, 14], 8: [16, 19, 21, 14], 9: [17, 18, 21, 12], 10: [21, 22, 13, 15], 11: [1, 2, 3, 4], 12: [1, 7, 9], 13: [10, 1, 6], 14: [2, 7, 8], 15: [10, 2, 5], 16: [3, 6, 8], 17: [3, 5, 9], 18: [4, 6, 9], 19: [4, 5, 8], 20: [5, 6, 7], 21: [10, 8, 9], 22: [10, 3, 7]}
Con_12_1_2 = {1: [11, 12, 13],
 2: [11, 14, 15], 3: [16, 17, 11], 4: [18, 19, 22, 11], 5: [17, 19, 20, 15], 6: [16, 18, 20, 13], 7: [22, 20, 12, 14], 8: [16, 19, 21, 14], 9: [17, 18, 21, 12], 10: [21, 22, 13, 15], 11: [1, 2, 3, 4], 12: [1, 7, 9], 13: [10, 1, 6], 14: [2, 7, 8], 15: [10, 2, 5], 16: [3, 6, 8], 17: [3, 5, 9], 18: [4, 6, 9], 19: [4, 5, 8], 20: [5, 6, 7], 21: [10, 8, 9], 22: [10, 4, 7]}
Con_12_1_3 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 19, 12], 6: [16, 19, 21, 13], 7: [17, 22, 20, 13], 8: [19, 22, 14, 15], 9: [21, 20, 14], 10: [18, 21, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 6, 8], 20: [3, 7, 9], 21: [10, 6, 9], 22: [4, 7, 8]}
Con_12_1_4 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 19, 12], 6: [16, 20, 13], 7: [17, 21, 22, 13], 8: [22, 20, 14, 15], 9: [16, 19, 21, 14], 10: [18, 21, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6, 9], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 9], 20: [3, 6, 8], 21: [10, 7, 9], 22: [4, 7, 8]}
Con_12_1_5 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 21, 12], 6: [16, 19, 13], 7: [17, 22, 20, 13], 8: [19, 22, 14, 15], 9: [21, 20, 14], 10: [18, 21, 13, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [10, 1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 6, 8], 20: [3, 7, 9], 21: [10, 5, 9], 22: [4, 7, 8]}
Con_12_1_6 = {1: [11, 12, 13, 14],
 2: [16, 17, 18, 15],
 3: [19, 20, 11, 15], 4: [21, 12, 15], 5: [17, 21, 22, 11], 6: [18, 19, 22, 12], 7: [17, 20, 13], 8: [16, 19, 21, 13], 9: [18, 21, 14], 10: [16, 22, 20, 14], 11: [1, 3, 5], 12: [1, 4, 6], 13: [1, 7, 8], 14: [10, 1, 9], 15: [2, 3, 4], 16: [10, 2, 8], 17: [2, 5, 7], 18: [2, 6, 9], 19: [3, 6, 8], 20: [10, 3, 7], 21: [4, 5, 8, 9], 22: [10, 5, 6]}
Con_12_1_7 = {1: [11, 12, 13, 14],
 2: [16, 17, 11, 15], 3: [18, 19, 12, 15], 4: [22, 20, 13, 15], 5: [16, 21, 12], 6: [18, 21, 22, 11], 7: [16, 19, 13], 8: [17, 19, 22, 14], 9: [16, 18, 20, 14], 10: [17, 21, 20], 11: [1, 2, 6], 12: [1, 3, 5], 13: [1, 4, 7], 14: [1, 8, 9], 15: [2, 3, 4], 16: [2, 5, 7, 9], 17: [10, 2, 8], 18: [3, 6, 9], 19: [3, 7, 8], 20: [10, 4, 9], 21: [10, 5, 6], 22: [4, 6, 8]}

Con_12_1_1_Graph = BipartiteGraph(Graph(Con_12_1_1), (range(1,11),range(11,23)))
Con_12_1_2_Graph = BipartiteGraph(Graph(Con_12_1_2), (range(1,11),range(11,23)))
Con_12_1_3_Graph = BipartiteGraph(Graph(Con_12_1_3), (range(1,11),range(11,23)))
Con_12_1_4_Graph = BipartiteGraph(Graph(Con_12_1_4), (range(1,11),range(11,23)))
Con_12_1_5_Graph = BipartiteGraph(Graph(Con_12_1_5), (range(1,11),range(11,23)))
Con_12_1_6_Graph = BipartiteGraph(Graph(Con_12_1_6), (range(1,11),range(11,23)))
Con_12_1_7_Graph = BipartiteGraph(Graph(Con_12_1_7), (range(1,11),range(11,23)))

Con_12_1_1_Graph.name("Con-12-1 #1")
Con_12_1_2_Graph.name("Con-12-1 #2")
Con_12_1_3_Graph.name("Con-12-1 #3")
Con_12_1_4_Graph.name("Con-12-1 #4")
Con_12_1_5_Graph.name("Con-12-1 #5")
Con_12_1_6_Graph.name("Con-12-1 #6")
Con_12_1_7_Graph.name("Con-12-1 #7")

Con_12_1_List = [Con_12_1_1_Graph, Con_12_1_2_Graph, Con_12_1_3_Graph, Con_12_1_4_Graph, Con_12_1_5_Graph, Con_12_1_6_Graph, Con_12_1_7_Graph]


Con_13_1_1 = {1: [11, 12, 13, 14],
              2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 19, 23, 12], 6: [16, 23, 20, 13], 7: [17, 21, 22, 13], 8: [22, 20, 14, 15], 9: [16, 19, 21, 14], 10: [18, 21, 23, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6, 9], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 9], 20: [3, 6, 8], 21: [10, 7, 9], 22: [4, 7, 8], 23: [10, 5, 6]}
Con_13_1_1_Graph = BipartiteGraph(Graph(Con_13_1_1), (range(1,11),range(11,24)))
Con_13_1_1_Graph.name("Con-13-1 #1: Maximal Incidence")
Con_13_1_List = [Con_13_1_1_Graph]


Con_11_3_1 = {1: [11, 12, 13, 14],
              2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 12], 5: [17, 19, 21, 12], 6: [16, 19, 13], 7: [17, 20, 13], 8: [19, 14, 15], 9: [16, 21, 20, 14], 10: [18, 21, 13, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [10, 1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6, 9], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 6, 8], 20: [3, 7, 9], 21: [10, 5, 9]}
Con_11_3_1_Graph = BipartiteGraph(Graph(Con_11_3_1), (range(1,11),range(11,22)))
Con_11_3_1_Graph.name("Con-11-3 #1: The Peilen Superconfiguration")
Con_11_3_List = [Con_11_3_1_Graph]


Con_12_2_1 = {1: [11, 12, 13, 14],
              2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 21, 12], 6: [16, 19, 13], 7: [17, 22, 20, 13], 8: [19, 22, 14, 15], 9: [16, 21, 20, 14], 10: [18, 21, 13, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [10, 1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6, 9], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 6, 8], 20: [3, 7, 9], 21: [10, 5, 9], 22: [4, 7, 8]}
Con_12_2_1_Graph = BipartiteGraph(Graph(Con_12_2_1), (range(1,11),range(11,23)))
Con_12_2_1_Graph.name("Con-12-2 #1: The Lawrence Superconfiguration")
Con_12_2_List = [Con_12_2_1_Graph]


Con_12_3_1 = {1: [11, 12, 13, 14],
              2: [16, 17, 11, 15], 3: [18, 19, 20, 11], 4: [16, 18, 22, 12], 5: [17, 19, 21, 12], 6: [16, 19, 13], 7: [17, 22, 20, 13], 8: [19, 22, 14, 15], 9: [16, 21, 20, 14], 10: [18, 21, 13, 15], 11: [1, 2, 3], 12: [1, 4, 5], 13: [10, 1, 6, 7], 14: [1, 8, 9], 15: [10, 2, 8], 16: [2, 4, 6, 9], 17: [2, 5, 7], 18: [10, 3, 4], 19: [3, 5, 6, 8], 20: [3, 7, 9], 21: [10, 5, 9], 22: [4, 7, 8]}
Con_12_3_1_Graph = BipartiteGraph(Graph(Con_12_3_1), (range(1,11),range(11,23)))
Con_12_3_1_Graph.name("Con-12-3 #1: Woop!")
Con_12_3_List = [Con_12_3_1_Graph]


Con_13_2_List = []
Con_13_3_List = []

Con_10_4_1 = {10: [14, 12, 13], 1: [19, 15, 12], 2: [17, 16, 12], 3: [19, 18, 13], 4: [17, 20, 13], 11: [8, 9, 5], 14: [10, 6, 7], 15: [1, 9, 6], 16: [2, 9, 7], 18: [8, 3, 6], 20: [8, 4, 7], 5: [17, 19, 11], 12: [10, 8, 1, 2], 13: [10, 9, 3, 4], 6: [17, 14, 15, 18], 7: [19, 14, 16, 20], 8: [11, 18, 20, 12], 17: [2, 4, 5, 6], 9: [11, 15, 16, 13], 19: [1, 3, 5, 7]}
Con_10_4_1_Graph = BipartiteGraph(Graph(Con_10_4_1), (range(1,11), range(11,21)))
Con_10_4_1_Graph.name("Con-10-4 #1: MindFuck")
Con_10_4_List = [Con_10_4_1_Graph]



########################
#     Some Utilities
########################

#checks if your favorite graph is unique up to isomorphism compared to the list. Dual Levi graphs with = numbers of points and lines will be treated as isomorphic!
def isRepeat(myGraph, graphList):
    for g in graphList:
        if myGraph.is_isomorphic(g):
            return True
    return False

#Takes in a list of bipartite graphs; gives back a list of bipartite graphs which are unique up to isomorphism
def removeRepeats(graphList):
    i = 0
    while i < len(graphList)-1: 
        j = i+1
        while j < len(graphList):
            if graphList[i].is_isomorphic(graphList[j]):
                del graphList[j]
            else:
                j += 1
        i += 1
    return graphList

#Takes in a list of bipartite graphs; Gives back a dictionary of bipartite graphs which are unique up to isomorphism
def reportRepeats(graphList):
    i = 0
    for i in graphList: 
        for j in graphList:
            if i.name() != j.name():
                if i.is_isomorphic(j):
                    print j
                    print "is isomorphic to "
                    print i
                    print " "
    print "done"
    return

#Takes in a single BipartiteGraph; adds a vertex to the lines partition; Gives back a list of (all isomorphic, 4-cycle free) graphs with 3 extra edges from that vertex
def addD3Line(oldGraph, numLines):
    k = 11+numLines
    newGraph = copy(oldGraph)
    newGraph.add_vertex(k, right=True)
    newGraphList = []
    for first in newGraph.left:
        if newGraph.degree(first) == 3:
            newGraph.add_edge(k, first) #first edge will never be a cycle
            for second in newGraph.left:
                if newGraph.degree(second) == 3 and second > first:
                    newGraph.add_edge(k, second)
                    for third in newGraph.left:
                        if newGraph.degree(third) == 3 and third > second:
                            newGraph.add_edge(k, third)
                            if isRepeat(newGraph, newGraphList) == False and newGraph.girth() >= 6: #could check for 4cycles earlier if optimization needed
                                newGraphList.append(copy(newGraph))
                            newGraph.delete_edge(k, third)
                    newGraph.delete_edge(k, second)
            newGraph.delete_edge(k, first)
    return newGraphList

#Takes in a list of Levi Graphs w./ numLines lines (as BipartiteGraphs)
#Gives back a list of (n+1)-line graphs which are unique up to isomorphism & 4-cycle free
def listAddD3Line(smallGraphs, numLines):
    bigGraphs = []
    for G in smallGraphs:
        temp = addD3Line(G, numLines)
        bigGraphs = bigGraphs + copy(temp)
    return removeRepeats(bigGraphs)

def rightArrow(oldGraph, numLines):
    return addD3Line(oldGraph, numLines)

def listRightArrow(smallGraphs, numLines):
    return listAddD3Line(smallGraphs, numLines)

#Takes in a single BipartiteGraph on numLines lines
#tries to add a new edge from a degree-3 vertex in right partition to a degree-3 vertex in left partition
#Returns a list of all possible (nonisomorphic, 4-cycle free) configurations where exactly one d3-line has been lengthened to a d4-line
def lengthenD3Line(oldGraph, numLines):
    k = 11 + numLines
    newGraph = copy(oldGraph)
    newGraphList = []
    for line in newGraph.right:
        if newGraph.degree(line) == 3:
            for point in newGraph.left:
                if not newGraph.has_edge(point, line) and newGraph.degree(point) == 3:
                    newGraph.add_edge(point, line) 
                    if isRepeat(newGraph, newGraphList) == False and newGraph.girth() >= 6: #could check for 4cycles earlier if optimization needed
                        newGraphList.append(copy(newGraph))
                    newGraph.delete_edge(point, line)
    return newGraphList

#takes in a list of BipartiteGraphs on numLines lines
#returns a list of all nonisomorphic valid Levi graphs created by lengthening exactly one d3 line (in any one graph) into a d4 line
def listLengthen(smallGraphs, numLines):
    bigGraphs = []
    for G in smallGraphs:
        temp = lengthenD3Line(G, numLines)
        bigGraphs = bigGraphs + copy(temp)
    return removeRepeats(bigGraphs)


def upArrow(oldGraph, numLines):
    return lengthenD3Line(oldGraph, numLines)

def listUpArrow(smallGraphs, numLines):
    return listLengthen(smallGraphs, numLines)

#if you have a graph and you want to know what its configuration name is
#up to isomorphism, that is (duals are not distinguished)
def findMyGraph(myGraph, allGraphsList):
    for candidate in allGraphsList:
        if candidate.is_isomorphic(myGraph):
            #print candidate
            return candidate
    print "graph not found"
    return 0

#give it a list of graphs, and it will give back that list of graphs plus duals (with extra partition defining vertex)
#It will also print true or false for each graph in your list -- true means self dual, false means not.
def addDuals(graphList):
    totalList = []
    for graph in graphList:
        copyGraph = deepcopy(graph)
        graph.add_vertex(0, left=True)
        for i in range(11,21):
            graph.add_edge(0, i)
        #graph.plot().show()
        copyGraph.add_vertex(100, right=True)
        for i in range(1, 11):
            copyGraph.add_edge(100, i)
        totalList += [graph]
        totalList += [copyGraph]
        print copyGraph.is_isomorphic(graph)
        #graph.plot().show()
        #copyGraph.plot().show()
    removeRepeats(totalList)
    return totalList

#makes an immutable copy of your graphList. Good for doing set operations on your list
def immutableCopy(graphList):
    newList = []
    for graph in graphList:
        newList += graph.copy(immutable = True)
    return newList

#another way to have an immutable copy of your graphList. This one makes a list of just the graph names.
def toNameList(graphList, ListOfAllConfigurations):
    newList = []
    i = 0
    for graph in graphList:
        possibleEntry = findMyGraph(graph, ListOfAllConfigurations)
        if type(possibleEntry) is BipartiteGraph:
            newList.append(possibleEntry.name())
            print i
            print possibleEntry.name()
        else:
            print i
            print "was not found"
        i += 1
    return newList


#Below are ListOfAllConfigurations and the giantGraph of parent / child configurations


ListOfAllConfigurations = (deepcopy(ConfigDual_10s) + 
                           deepcopy(Con_10_0_List) + 
                           deepcopy(Con_10_1_List) + 
                           deepcopy(Con_10_2_List) + 
                           deepcopy(Con_10_3_List) + 
                           deepcopy(Con_11_0_List) + 
                           deepcopy(Con_11_1_List) +
                           deepcopy(Con_11_2_List) +
                           deepcopy(Con_11_3_List) +
                           deepcopy(Con_12_0_List) +
                           deepcopy(Con_12_1_List) +
                           deepcopy(Con_12_2_List) +
                           deepcopy(Con_12_3_List) +
                           deepcopy(Con_13_0_List) +
                           deepcopy(Con_13_1_List) +
                           deepcopy(Con_13_2_List) +
                           deepcopy(Con_13_3_List) +
                           deepcopy(Con_10_4_List))

#copy of what giantGraph is as of 7/7. Run this to be sure if you might've modified it for whatever reason.

giantGraphData = {'Con-11-0 #28': ['Con-11-1 R. #19', 'Con-11-1 R. #13', 'Con-11-1 R. #20'], 'Con-11-0 #25': [], 'Con-11-0 #24': ['Con-11-1 R. #15'], 'Con-11-0 #27': ['Con-11-1 R. #18', 'Con-11-1 R. #17'], 'Con-11-0 #26': ['Con-11-1 R. #16'], 'Con-11-0 #21': [], 'Con-11-0 #20': [], 'Con-11-0 #23': [], 'Con-11-0 #22': [], 'Con-11-1 R. #18': [], 'Con-11-1 R. #19': [], 'Con-11-1 R. #10': [], 'Con-11-1 R. #11': ['Con-11-2 #2'], 'Con-11-1 R. #12': ['Con-11-2 #1'], 'Con-11-1 R. #13': ['Con-11-2 #3'], 'Con-11-1 R. #14': ['Con-11-2 #3'], 'Con-11-1 R. #15': [], 'Con-11-1 R. #16': [], 'Con-11-1 R. #17': [], 'Con-10-1-R #6 (Anti-Desargues No. 1)': ['Con-10-2 R #3 (Anti-Desargues No. 2)'], 'Con-11-1 R. #2': [], 'Con-11-1 R. #3': [], 'Con-11-1 R. #1': [], 'Con-11-1 R. #6': [], 'Con-11-1 R. #7': [], 'Con-11-1 R. #4': ['Con-11-2 #1'], 'Con-11-1 R. #5': [], 'Con-11-1 R. #8': [], 'Con-11-1 R. #9': [], 'Con-12-1 #2': [], 'Con-11-1 R. #24': [], 'Con-11-1 R. #21': [], 'Con-11-1 R. #20': ['Con-11-2 #3'], 'Con-11-1 R. #23': [], 'Con-11-1 R. #22': [], 'Con-12-1 #4': [], 'Con-12-0 Reachable #6': [], 'Con-12-0 Reachable #7': [], 'Con-12-0 Reachable #4': [], 'Con-12-0 Reachable #5': [], 'Con-12-0 Reachable #2': [], 'Con-12-0 Reachable #3': [], 'Con-12-0 Reachable #1': [], 'Con-12-1 #7': [], 'Con-12-0 Reachable #8': [], 'Con-12-0 Reachable #9': [], 'Con-11-0 #2': ['Con-11-1 R. #2', 'Con-11-1 R. #1'], 'Con-11-0 #3': ['Con-11-1 R. #3'], 'Con-11-0 #1': [], 'Con-11-0 #6': [], 'Con-11-0 #7': ['Con-11-1 R. #6'], 'Con-11-0 #4': ['Con-11-1 R. #4', 'Con-11-1 R. #5'], 'Con-11-0 #5': [], 'Con-10-2 Un. #5: Robot': [], 'Con-11-0 #9': ['Con-11-1 R. #9'], 'Con-10-1-R #8': [], 'Con-11-0 #41': [], 'Con-11-0 #40': ['Con-11-1 R. #24'], 'Con-10-1-R #2': [], 'ConfigDual-9-6': [], 'ConfigDual-9-5': [], 'ConfigDual-9-4': [], 'Con-12-3 #1: Woop!': [], 'Con-13-0 #1': [], 'Con-13-0 #2': [], 'Con-10-2 Un. #3': [], 'Con-11-2 #1': ['Con-11-3 #1: The Peilen Superconfiguration'], 'Con-11-2 #2': [], 'Con-11-2 #3': [], 'Con-11-3 #1: The Peilen Superconfiguration': [], 'Con-11-0 #8': ['Con-11-1 R. #8', 'Con-11-1 R. #7'], 'Con-11-1 Unreachable #3': [], 'Con-11-1 Unreachable #2': [], 'Con-11-1 Unreachable #1': [], 'Con-10-0 #2': ['Con-10-1-R #3', 'Con-10-1-R #2'], 'Con-10-0 #5': ['Con-10-1-R #7'], 'Con-10-0 #4': ['Con-10-1-R #6 (Anti-Desargues No. 1)'], 'Con-11-1 Unreachable #5': [], 'Con-11-1 Unreachable #4': [], 'Con-10-0 #9': [], 'Con-10-0 #8': [], 'Con-10-4 #1: MindFuck': [], 'Con-12-2 #1: The Lawrence Superconfiguration': ['Con-12-3 #1: Woop!'], 'Con-12-0: Unreachable #1 (EvilGrid)': [], 'Con-10-2 R #7': [], 'Con-10-2 R #6': ['Con-10-3 #5'], 'Con-10-2 R #5': [], 'Con-10-2 R #4': [], 'Con-10-2 R #2': ['Con-10-3 #3'], 'Con-10-2 R #1': ['Con-10-3 #1', 'Con-10-3 #2'], 'Con-10-1 Un. #11': ['Con-10-2 R #7'], 'Con-10-1 Un. #10': [], 'Con-10-1 Un. #12': [], 'Con-10-0 #3': ['Con-10-1-R #4'], 'Con-11-0 #14': ['Con-11-1 R. #1'], 'Con-11-0 #15': ['Con-11-1 R. #11', 'Con-11-1 R. #6'], 'Con-11-0 #16': [], 'Con-11-0 #17': ['Con-11-1 R. #12', 'Con-11-1 R. #4'], 'Con-11-0 #10': [], 'Con-11-0 #11': ['Con-11-1 R. #10'], 'Con-11-0 #12': [], 'Con-11-0 #13': [], 'Con-11-0 #18': ['Con-11-1 R. #3'], 'Con-11-0 #19': ['Con-11-1 R. #13', 'Con-11-1 R. #14'], 'Con-10-1-R #3': ['Con-10-2 R #2'], 'Con-12-1 #1': [], 'Con-10-1-R #1': ['Con-10-2 R #1'], 'Con-12-1 #3': [], 'Con-10-1-R #7': [], 'Con-12-1 #5': ['Con-12-2 #1: The Lawrence Superconfiguration'], 'Con-12-1 #6': [], 'Con-10-1-R #4': [], 'Con-10-0 #6': ['Con-10-1-R #8'], 'Con-10-3 #5': [], 'Con-10-3 #1': [], 'Con-10-3 #2': ['Con-10-4 #1: MindFuck'], 'Con-10-3 #3': [], 'Con-10-0 #7': [], 'Con-11-0 #32': [], 'Con-10-3 #4 (UberFano / Anti-Desargues No. 3)': [], 'Con-10-0 #10': [], 'Con-10-1 Un. #9': ['Con-10-2 R #6'], 'Con-10-1 Un. #8': [], 'Con-10-2 R #3 (Anti-Desargues No. 2)': ['Con-10-3 #4 (UberFano / Anti-Desargues No. 3)'], 'Con-10-1 Un. #1': [], 'Con-10-2 Un. #1': [], 'Con-10-2 Un. #2': [], 'Con-10-1 Un. #2': [], 'Con-10-1 Un. #5': ['Con-10-2 R #5'], 'Con-10-1 Un. #4': [], 'Con-10-1 Un. #7': [], 'Con-10-1 Un. #6': [], 'Con-10-1 Un. #3': ['Con-10-2 R #4'], 'Con-11-0 #33': ['Con-11-1 R. #22'], 'Con-11-0 #31': ['Con-11-1 R. #21'], 'Con-11-0 #34': ['Con-11-1 R. #23'], 'Con-10-2 Un. #4: Dreidel': [], 'Con-13-1 #1: Maximal Incidence': [], 'Con-10-0 #1 (Desargues)': ['Con-10-1-R #1'], 'Con-12-0 Reachable #10': [], 'Con-12-0 Reachable #11': [], 'Con-12-0 Reachable #12': [], 'Con-12-0 Reachable #13': [], 'Con-12-0 Reachable #14': [], 'Con-12-0 Reachable #15': [], 'Con-12-0 Reachable #16': [], 'Con-12-0 Reachable #17': [], 'Con-12-0 Reachable #18': []}

giantGraph = DiGraph(giantGraphData)

#get data out of giantGraph
#giantGraph is a directed graph that tells you which graphs were generated from other graphs via UP arrows.

#print "Example 1: Things which generate 11-1 R #2"
#giantGraph.neighbors_in(Con_11_1_R_2_Graph.name())
#print "Example 2: Things which are generated by 11-0 #9"
#giantGraph.neighbors_out(Con_11_0_9_Graph.name())


#########################
# Verification utilities
#########################


# checks ListOfAllConfigurations to make sure vertex degree and girth conditions are met
def graphVerification1(ListOfAllConfigurations):
    for graph in ListOfAllConfigurations:
        if graph.girth() < 6:
            print graph
            print "failed the girth test"
        for vertex in graph.vertices():
            if graph.degree(vertex) <= 2 or graph.degree(vertex) > 5:
                print graph
                print "vertex failed with degree"
                print vertex.degree()
    print "done"
    return

# checks graphList to make sure partition size condition is met
def graphVerification2(graphList):
    for graph in graphList:
        if len(graph.left) != 10 and len(graph.right) != 10:
            print "partition size error"
            print graph
            print " "
    print "done"
    return

# to check that all graphs are unique up to isomorphism: use reportRepeats(ListOfAllConfigurations)

# to check that the number of graphs is what you expect it to be, given that you know about some extra duals and a starfish
def numConfigs(ListOfAllConfigurations, numUnlisted):
    return (len(ListOfAllConfigurations) + numUnlisted)

#ways to verify there are no missing configurations

#generate all configs with: vert degree 3 or 4, girth >= 6, and the specified number of verts total
#this will take a long time (exponential, potentially, in # vertices)
#gen = graphs.nauty_geng("20 -f -b -d3 -D4") #20 vertices, no 4cycles, bipartite, vert degree min 3 and max 4
#myList = list(gen)

#pare down your nauty list (generated as seen above) to just those with your favorite partition
def generateUpperBound(nautyList, numPoints):
    newList = []
    for graph in nautyList:
        biGraph = BipartiteGraph(graph)
    if len(biGraph.left) == 10 or len(biGraph.right) == 10:
        newList.append(biGraph)
    return newList
        



#if there is a subgraph of bigGraph in smallList that is a variable, return that subgraph
#else tell user none was found and return self
def findSubgraph(bigGraph, smallList):
    #count = 0
    for smallGraph in smallList:
        #count += 1
        #print count
        #returned = bigGraph.subgraph_search(smallGraph)
        returned = is_induced_subgraph(smallGraph, bigGraph)
        if returned is not None:
            #print "success"
            return returned
    print "no dice"
    return returned

def findSubgraphList(bigList, smallList):
    pairs = []
    subgraphsAlone = []
    for bigGraph in bigList:
        #print bigGraph
        result = findSubgraph(bigGraph, smallList)
        #result = bigGraph.subgraph_search(bigGraph)
        if result is not None:
            pairs.append([bigGraph, result])
            subgraphsAlone.append(result)
    return [pairs, subgraphsAlone]
        

def is_induced_subgraph(smallGraph, bigGraph):
    for vert in range(1, 11):
        big2 = deepcopy(bigGraph)
        big2.delete_vertex(vert)
        for line in range(11, bigGraph.order()+1):
            if big2.degree(line) < 3:
                big2.delete_vertex(line)
        if big2.is_isomorphic(smallGraph):
            return big2
    return None

    

# Max's activity space

def inc_switch (graph, Configurations):
    switches = []
    for e1 in graph.edges():
        for e2 in graph.edges():
            if e1[0] in graph.left:
                p1 = e1[0]
                l1 = e1[1]
            else:
                p1 = e1[1]
                l1 = e1[0]
            if e2[0] in graph.left:
                p2 = e2[0]
                l2 = e2[1]
            else:
                p2 = e2[1]
                l2 = e2[0]
            if p1 != p2 and l1 != l2 and not graph.has_edge(p1,l2) and not graph.has_edge(p2,l1):
                switch = deepcopy(graph)
                switch.delete_edge(p1,l1)
                switch.delete_edge(p2,l2)
                switch.add_edge(p1,l2)
                switch.add_edge(p2,l1)
                if switch.girth() >= 6:
                    name = findMyGraph(switch, Configurations).name()
                    switches += [name]
    switches = list(set(switches))
    return switches

def switch_relations (Configurations):
    output = []
    for c in Configurations:
        s = inc_switch(c, Configurations)
        for name in s:
            output += [[c.name(),name]]
    for o in output:
        print o[0]
    print
    for o in output:
        print o[1]

#finds 6 graphs that we could draw very easily. Is sad because I thought there might be more.

myList9 = []
for n in range(1,25):
    gen = (hypergraphs.nauty(n, 9, max_intersection=1, set_min_size = 3, connected = True,  vertex_min_degree = 2))
    myList9 += list(gen)
len(myList9)
︡1aa94661-3615-427d-9278-e42803ffd5bd︡{"stdout":"100\n"}︡
︠76de9c61-2cc2-4dce-91a8-167c11252f2b︠

def incidenceToGraph(myList):
    graphList = []
    for design in myList:
        #print design
        BD = designs.IncidenceStructure(design)
        BDGraph = BD.incidence_graph()
        #print BDGraph
        graphList.append(BDGraph)
    return graphList


myGraphList9 = incidenceToGraph(myList9)
len(myGraphList9)
#findSubgraphList(ListOfAllConfigurations, myGraphList9)

subgraphList = findSubgraphList(ListOfAllConfigurations, myGraphList9)

#now all you need to do is be able to tell which of j. doyen's drawings corresponds to the 9-pt subgraph you found. Perhaps j. doyen categorized them in some fashion for easy looking-up?

nonIsoSubGraphs = removeRepeats(deepcopy(subgraphList[1]))
len(nonIsoSubGraphs)
len(subgraphList[1])

#Recap of above: each 10-pt graph can be drawn as one of 59 diff 9-pt configs, plus an extra vertex and its edges. SO, we have a systematic way to draw nice pictures of all 151 configs should we desire that. BUT it would require identifying/creating 59 different 9pt drawings, which is maybe almost as bad. Not worth it for right now.
︠

nonIsoSubGraphs[0].to_dictionary()

#print "Example 1: Things which generate 11-1 R #2"
giantGraph.neighbors_out(Con_11_0_13_Graph.name())


giantGraph.plot(layout = 'circular', vertex_labels = False, vertex_size = 2, by_component = True)


for graph in ListOfAllGraphs:
    if is_induced_subgraph()



ListOfAllConfigurations[0].name()


import json
jsonConfigurations = [ [ ListOfAllConfigurations[k].name(), ListOfAllConfigurations[k].to_dictionary()] for k in range(148) ]
print jsonConfigurations










